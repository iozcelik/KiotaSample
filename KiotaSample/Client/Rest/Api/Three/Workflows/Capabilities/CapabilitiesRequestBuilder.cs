// <auto-generated/>
using AtlassianClient.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace AtlassianClient.Rest.Api.Three.Workflows.Capabilities {
    /// <summary>
    /// Builds and executes requests for operations under \rest\api\3\workflows\capabilities
    /// </summary>
    public class CapabilitiesRequestBuilder : BaseRequestBuilder {
        /// <summary>
        /// Instantiates a new CapabilitiesRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CapabilitiesRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/api/3/workflows/capabilities{?workflowId*,projectId*,issueTypeId*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new CapabilitiesRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CapabilitiesRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/api/3/workflows/capabilities{?workflowId*,projectId*,issueTypeId*}", rawUrl) {
        }
        /// <summary>
        /// Get the list of workflow capabilities for a specific workflow using either the workflow ID, or the project and issue type ID pair. The response includes the scope of the workflow, defined as global/project-based, and a list of project types that the workflow is scoped to. It also includes all rules organised into their broad categories (conditions, validators, actions, triggers, screens) as well as the source location (Atlassian-provided, Connect, Forge).**[Permissions](#permissions) required:** *  *Administer Jira* project permission to access all, including global-scoped, workflows *  *Administer projects* project permissions to access project-scoped workflowsThe current list of Atlassian-provided rules:#### Validators ####A validator rule that checks if a user has the required permissions to execute the transition in the workflow.##### Permission validator #####A validator rule that checks if a user has the required permissions to execute the transition in the workflow.    {       &quot;ruleKey&quot;: &quot;system:check-permission-validator&quot;,       &quot;parameters&quot;: {         &quot;permissionKey&quot;: &quot;ADMINISTER_PROJECTS&quot;       }     }Parameters: *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).##### Parent or child blocking validator #####A validator to block the child issue’s transition depending on the parent issue’s status.    {       &quot;ruleKey&quot; : &quot;system:parent-or-child-blocking-validator&quot;       &quot;parameters&quot; : {         &quot;blocker&quot; : &quot;PARENT&quot;         &quot;statusIds&quot; : &quot;1,2,3&quot;       }     }Parameters: *  `blocker` currently only supports `PARENT`. *  `statusIds` a comma-separated list of status IDs.##### Previous status validator #####A validator that checks if an issue has transitioned through specified previous status(es) before allowing the current transition to occur.    {       &quot;ruleKey&quot;: &quot;system:previous-status-validator&quot;,       &quot;parameters&quot;: {         &quot;previousStatusIds&quot;: &quot;10014&quot;,         &quot;mostRecentStatusOnly&quot;: &quot;true&quot;       }     }Parameters: *  `previousStatusIds` a comma-separated list of status IDs, currently only support one ID. *  `mostRecentStatusOnly` when `true` only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.##### Validate a field value #####A validation that ensures a specific field&apos;s value meets the defined criteria before allowing an issue to transition in the workflow.Depending on the rule type, the result will vary:###### Field required ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;fieldRequired&quot;,         &quot;fieldsRequired&quot;: &quot;assignee&quot;,         &quot;ignoreContext&quot;: &quot;true&quot;,         &quot;errorMessage&quot;: &quot;An assignee must be set!&quot;       }     }Parameters: *  `fieldsRequired` the ID of the field that is required. For a custom field, it would look like `customfield_123`. *  `ignoreContext` controls the impact of context settings on field validation. When set to `true`, the validator doesn&apos;t check a required field if its context isn&apos;t configured for the current issue. When set to `false`, the validator requires a field even if its context is invalid. Allowed values: `true`, `false`. *  `errorMessage` is the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don&apos;t provide one (Optional).###### Field changed ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;fieldChanged&quot;,         &quot;groupsExemptFromValidation&quot;: &quot;6862ac20-8672-4f68-896d-4854f5efb79e&quot;,         &quot;fieldKey&quot;: &quot;versions&quot;,         &quot;errorMessage&quot;: &quot;Affect versions must be modified before transition&quot;       }     }Parameters: *  `groupsExemptFromValidation` a comma-separated list of group IDs to be exempt from the validation. *  `fieldKey` the ID of the field that has changed. For a custom field, it would look like `customfield_123`. *  `errorMessage` the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don&apos;t provide one (Optional).###### Field has a single value ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;fieldHasSingleValue&quot;,         &quot;fieldKey&quot;: &quot;created&quot;,         &quot;excludeSubtasks&quot;: &quot;true&quot;       }     }Parameters: *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`. *  `excludeSubtasks` Option to exclude values copied from sub-tasks. Allowed values: `true`, `false`.###### Field matches regular expression ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;fieldMatchesRegularExpression&quot;,         &quot;regexp&quot;: &quot;[0-9]{4}&quot;,         &quot;fieldKey&quot;: &quot;description&quot;       }     }Parameters: *  `regexp` the regular expression used to validate the field’s content. *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.###### Date field comparison ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;dateFieldComparison&quot;,         &quot;date1FieldKey&quot;: &quot;duedate&quot;,         &quot;date2FieldKey&quot;: &quot;customfield_10054&quot;,         &quot;includeTime&quot;: &quot;true&quot;,         &quot;conditionSelected&quot;: &quot;&gt;=&quot;       }     }Parameters: *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`. *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`. *  `includeTime` if `true`, compares both date and time. Allowed values: `true`, `false`. *  `conditionSelected` the condition to compare with. Allowed values: `&gt;`, `&gt;=`, `=`, `&lt;=`, `&lt;`, `!=`.###### Date range comparison ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;windowDateComparison&quot;,         &quot;date1FieldKey&quot;: &quot;customfield_10009&quot;,         &quot;date2FieldKey&quot;: &quot;customfield_10054&quot;,         &quot;numberOfDays&quot;: &quot;3&quot;       }     }Parameters: *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`. *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`. *  `numberOfDays` maximum number of days past the reference date (`date2FieldKey`) to pass validation.This rule is composed by aggregating the following legacy rules: *  FieldRequiredValidator *  FieldChangedValidator *  FieldHasSingleValueValidator *  RegexpFieldValidator *  DateFieldValidator *  WindowsDateValidator##### Proforma: Forms attached validator #####Validates that one or more forms are attached to the issue.    {       &quot;ruleKey&quot; : &quot;system:proforma-forms-attached&quot;       &quot;parameters&quot; : {}     }##### Proforma: Forms submitted validator #####Validates that all forms attached to the issue have been submitted.    {       &quot;ruleKey&quot; : &quot;system:proforma-forms-submitted&quot;       &quot;parameters&quot; : {}     }#### Conditions ####Conditions enable workflow rules that govern whether a transition can execute.##### Check field value #####A condition rule evaluates as true if a specific field&apos;s value meets the defined criteria. This rule ensures that an issue can only transition to the next step in the workflow if the field&apos;s value matches the desired condition.    {       &quot;ruleKey&quot;: &quot;system:check-field-value&quot;,       &quot;parameters&quot;: {         &quot;fieldId&quot;: &quot;description&quot;,         &quot;fieldValue&quot;: &quot;[\&quot;Done\&quot;]&quot;,         &quot;comparator&quot;: &quot;=&quot;,         &quot;comparisonType&quot;: &quot;STRING&quot;       }     }Parameters: *  `fieldId` The ID of the field to check the value of. For non-system fields, it will look like `customfield_123`. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field. *  `fieldValue` the list of values to check against the field’s value. *  `comparator` The comparison logic. Allowed values: `&gt;`, `&gt;=`, `=`, `&lt;=`, `&lt;`, `!=`. *  `comparisonType` The type of data being compared. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, `OPTIONID`.##### Restrict issue transition #####This rule ensures that issue transitions are restricted based on user accounts, roles, group memberships, and permissions, maintaining control over who can transition an issue. This condition evaluates as `true` if any of the following criteria is met.    {       &quot;ruleKey&quot;: &quot;system:restrict-issue-transition&quot;,       &quot;parameters&quot;: {         &quot;accountIds&quot;: &quot;allow-reporter,5e68ac137d64450d01a77fa0&quot;,         &quot;roleIds&quot;: &quot;10002,10004&quot;,         &quot;groupIds&quot;: &quot;703ff44a-7dc8-4f4b-9aa6-a65bf3574fa4&quot;,         &quot;permissionKeys&quot;: &quot;ADMINISTER_PROJECTS&quot;,         &quot;groupCustomFields&quot;: &quot;customfield_10028&quot;,         &quot;allowUserCustomFields&quot;: &quot;customfield_10072,customfield_10144,customfield_10007&quot;,         &quot;denyUserCustomFields&quot;: &quot;customfield_10107&quot;       }     }Parameters: *  `accountIds` a comma-separated list of the user account IDs. It also allows generic values like: `allow-assignee`, `allow-reporter`, and `accountIds` Note: This is only supported in team-managed projects *  `roleIds` a comma-separated list of role IDs. *  `groupIds` a comma-separated list of group IDs. *  `permissionKeys` a comma-separated list of permission keys. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions). *  `groupCustomFields` a comma-separated list of group custom field IDs. *  `allowUserCustomFields` a comma-separated list of user custom field IDs to allow for issue transition. *  `denyUserCustomFields` a comma-separated list of user custom field IDs to deny for issue transition.This rule is composed by aggregating the following legacy rules: *  AllowOnlyAssignee *  AllowOnlyReporter *  InAnyProjectRoleCondition *  InProjectRoleCondition *  UserInAnyGroupCondition *  UserInGroupCondition *  PermissionCondtion *  InGroupCFCondition *  UserIsInCustomFieldCondition##### Previous status condition #####A condition that evaluates based on an issue&apos;s previous status(es) and specific criteria.    {       &quot;ruleKey&quot; : &quot;system:previous-status-condition&quot;       &quot;parameters&quot; : {         &quot;previousStatusIds&quot; : &quot;10004&quot;,         &quot;not&quot;: &quot;true&quot;,         &quot;mostRecentStatusOnly&quot; : &quot;true&quot;,         &quot;includeCurrentStatus&quot;: &quot;true&quot;,         &quot;ignoreLoopTransitions&quot;: &quot;true&quot;       }     }Parameters: *  `previousStatusIds` a comma-separated list of status IDs, current only support one ID. *  `not` indicates if the condition should be reversed. When `true` it checks that the issue has not been in the selected statuses. Allowed values: `true`, `false`. *  `mostRecentStatusOnly` when true only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`. *  `includeCurrentStatus` includes the current status when evaluating if the issue has been through the selected statuses. Allowed values: `true`, `false`. *  `ignoreLoopTransitions` ignore loop transitions. Allowed values: `true`, `false`.##### Parent or child blocking condition #####A condition to block the parent’s issue transition depending on the child’s issue status.    {       &quot;ruleKey&quot; : &quot;system:parent-or-child-blocking-condition&quot;       &quot;parameters&quot; : {         &quot;blocker&quot; : &quot;CHILD&quot;,         &quot;statusIds&quot; : &quot;1,2,3&quot;       }     }Parameters: *  `blocker` currently only supports `CHILD`. *  `statusIds` a comma-separated list of status IDs.##### Separation of duties #####A condition preventing the user from performing, if the user has already performed a transition on the issue.    {       &quot;ruleKey&quot;: &quot;system:separation-of-duties&quot;,       &quot;parameters&quot;: {         &quot;fromStatusId&quot;: &quot;10161&quot;,         &quot;toStatusId&quot;: &quot;10160&quot;       }     }Parameters: *  `fromStatusId` represents the status ID from which the issue is transitioning. It ensures that the user performing the current transition has not performed any actions when the issue was in the specified status. *  `toStatusId` represents the status ID to which the issue is transitioning. It ensures that the user performing the current transition is not the same user who has previously transitioned the issue.##### Restrict transitions #####A condition preventing all users from transitioning the issue can also optionally include APIs as well.    {       &quot;ruleKey&quot;: &quot;system:restrict-from-all-users&quot;,       &quot;parameters&quot;: {         &quot;restrictMode&quot;: &quot;users&quot;       }     }Parameters: *  `restrictMode` restricts the issue transition including/excluding APIs. Allowed values: `&quot;users&quot;`, `&quot;usersAndAPI&quot;`.##### Jira Service Management block until approved #####Block an issue transition until approval. Note: This is only supported in team-managed projects.    {       &quot;ruleKey&quot;: &quot;system:jsd-approvals-block-until-approved&quot;,       &quot;parameters&quot;: {         &quot;approvalConfigurationJson&quot;: &quot;{&quot;statusExternalUuid...}&quot;       }     }Parameters: *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.##### Jira Service Management block until rejected #####Block an issue transition until rejected. Note: This is only supported in team-managed projects.    {       &quot;ruleKey&quot;: &quot;system:jsd-approvals-block-until-rejected&quot;,       &quot;parameters&quot;: {         &quot;approvalConfigurationJson&quot;: &quot;{&quot;statusExternalUuid...}&quot;       }     }Parameters: *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.##### Block in progress approval #####Condition to block issue transition if there is pending approval. Note: This is only supported in company-managed projects.    {       &quot;ruleKey&quot;: &quot;system:block-in-progress-approval&quot;,       &quot;parameters&quot;: {}     }#### Post functions ####Post functions carry out any additional processing required after a workflow transition is executed.##### Change assignee #####A post function rule that changes the assignee of an issue after a transition.    {       &quot;ruleKey&quot;: &quot;system:change-assignee&quot;,       &quot;parameters&quot;: {         &quot;type&quot;: &quot;to-selected-user&quot;,         &quot;accountId&quot;: &quot;example-account-id&quot;       }     }Parameters: *  `type` the parameter used to determine the new assignee. Allowed values: `to-selected-user`, `to-unassigned`, `to-current-user`, `to-current-user`, `to-default-user`, `to-default-user` *  `accountId` the account ID of the user to assign the issue to. This parameter is required only when the type is `&quot;to-selected-user&quot;`.##### Copy field value #####A post function that automates the process of copying values between fields during a specific transition, ensuring data consistency and reducing manual effort.    {       &quot;ruleKey&quot;: &quot;system:copy-value-from-other-field&quot;,       &quot;parameters&quot;: {         &quot;sourceFieldKey&quot;: &quot;description&quot;,         &quot;targetFieldKey&quot;: &quot;components&quot;,         &quot;issueSource&quot;: &quot;SAME&quot;       }     }Parameters: *  `sourceFieldKey` the field key to copy from. For a custom field, it would look like `customfield_123` *  `targetFieldKey` the field key to copy to. For a custom field, it would look like `customfield_123` *  `issueSource` `SAME` or `PARENT`. Defaults to `SAME` if no value is provided.##### Update field #####A post function that updates or appends a specific field with the given value.    {       &quot;ruleKey&quot;: &quot;system:update-field&quot;,       &quot;parameters&quot;: {         &quot;field&quot;: &quot;customfield_10056&quot;,         &quot;value&quot;: &quot;asdf&quot;,         &quot;mode&quot;: &quot;append&quot;       }     }Parameters: *  `field` the ID of the field to update. For a custom field, it would look like `customfield_123` *  `value` the value to update the field with. *  `mode` `append` or `replace`. Determines if a value will be appended to the current value, or if the current value will be replaced.##### Trigger webhook #####A post function that automatically triggers a predefined webhook when a transition occurs in the workflow.    {       &quot;ruleKey&quot;: &quot;system:trigger-webhook&quot;,       &quot;parameters&quot;: {         &quot;webhookId&quot;: &quot;1&quot;       }     }Parameters: *  `webhookId` the ID of the webhook.#### Screen ######### Remind people to update fields #####A screen rule that prompts users to update a specific field when they interact with an issue screen during a transition. This rule is useful for ensuring that users provide or modify necessary information before moving an issue to the next step in the workflow.    {       &quot;ruleKey&quot;: &quot;system:remind-people-to-update-fields&quot;,       &quot;params&quot;: {         &quot;remindingFieldIds&quot;: &quot;assignee,customfield_10025&quot;,         &quot;remindingMessage&quot;: &quot;The message&quot;,         &quot;remindingAlwaysAsk&quot;: &quot;true&quot;       }     }Parameters: *  `remindingFieldIds` a comma-separated list of field IDs. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field. *  `remindingMessage` the message to display when prompting the users to update the fields. *  `remindingAlwaysAsk` always remind to update fields. Allowed values: `true`, `false`.##### Shared transition screen #####A common screen that is shared between transitions in a workflow.    {       &quot;ruleKey&quot;: &quot;system:transition-screen&quot;,       &quot;params&quot;: {         &quot;screenId&quot;: &quot;3&quot;       }     }Parameters: *  `screenId` the ID of the screen.#### Connect &amp; Forge ######### Connect rules #####Validator/Condition/Post function for Connect app.    {       &quot;ruleKey&quot;: &quot;connect:expression-validator&quot;,       &quot;parameters&quot;: {         &quot;appKey&quot;: &quot;com.atlassian.app&quot;,         &quot;config&quot;: &quot;&quot;,         &quot;id&quot;: &quot;90ce590f-e90c-4cd3-8281-165ce41f2ac3&quot;,         &quot;disabled&quot;: &quot;false&quot;,         &quot;tag&quot;: &quot;&quot;       }     }Parameters: *  `ruleKey` Validator: `connect:expression-validator`, Condition: `connect:expression-condition`, and Post function: `connect:remote-workflow-function` *  `appKey` the reference to the Connect app *  `config` a JSON payload string describing the configuration *  `id` the ID of the rule *  `disabled` determine if the Connect app is disabled. Allowed values: `true`, `false`. *  `tag` additional tags for the Connect app##### Forge rules #####Validator/Condition/Post function for Forge app.    {       &quot;ruleKey&quot;: &quot;forge:expression-validator&quot;,       &quot;parameters&quot;: {         &quot;key&quot;: &quot;ari:cloud:ecosystem::extension/{appId}/{environmentId}/static/{moduleKey}&quot;,         &quot;config&quot;: &quot;{&quot;searchString&quot;:&quot;workflow validator&quot;}&quot;,         &quot;id&quot;: &quot;a865ddf6-bb3f-4a7b-9540-c2f8b3f9f6c2&quot;       }     }Parameters: *  `ruleKey` Validator: `forge:expression-validator`, Condition: `forge:expression-condition`, and Post function: `forge:workflow-post-function` *  `key` the identifier for the Forge app *  `config` the persistent stringified JSON configuration for the Forge rule *  `id` the ID of the Forge rule
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<WorkflowCapabilities?> GetAsync(Action<CapabilitiesRequestBuilderGetRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<WorkflowCapabilities> GetAsync(Action<CapabilitiesRequestBuilderGetRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<WorkflowCapabilities>(requestInfo, WorkflowCapabilities.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Get the list of workflow capabilities for a specific workflow using either the workflow ID, or the project and issue type ID pair. The response includes the scope of the workflow, defined as global/project-based, and a list of project types that the workflow is scoped to. It also includes all rules organised into their broad categories (conditions, validators, actions, triggers, screens) as well as the source location (Atlassian-provided, Connect, Forge).**[Permissions](#permissions) required:** *  *Administer Jira* project permission to access all, including global-scoped, workflows *  *Administer projects* project permissions to access project-scoped workflowsThe current list of Atlassian-provided rules:#### Validators ####A validator rule that checks if a user has the required permissions to execute the transition in the workflow.##### Permission validator #####A validator rule that checks if a user has the required permissions to execute the transition in the workflow.    {       &quot;ruleKey&quot;: &quot;system:check-permission-validator&quot;,       &quot;parameters&quot;: {         &quot;permissionKey&quot;: &quot;ADMINISTER_PROJECTS&quot;       }     }Parameters: *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).##### Parent or child blocking validator #####A validator to block the child issue’s transition depending on the parent issue’s status.    {       &quot;ruleKey&quot; : &quot;system:parent-or-child-blocking-validator&quot;       &quot;parameters&quot; : {         &quot;blocker&quot; : &quot;PARENT&quot;         &quot;statusIds&quot; : &quot;1,2,3&quot;       }     }Parameters: *  `blocker` currently only supports `PARENT`. *  `statusIds` a comma-separated list of status IDs.##### Previous status validator #####A validator that checks if an issue has transitioned through specified previous status(es) before allowing the current transition to occur.    {       &quot;ruleKey&quot;: &quot;system:previous-status-validator&quot;,       &quot;parameters&quot;: {         &quot;previousStatusIds&quot;: &quot;10014&quot;,         &quot;mostRecentStatusOnly&quot;: &quot;true&quot;       }     }Parameters: *  `previousStatusIds` a comma-separated list of status IDs, currently only support one ID. *  `mostRecentStatusOnly` when `true` only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.##### Validate a field value #####A validation that ensures a specific field&apos;s value meets the defined criteria before allowing an issue to transition in the workflow.Depending on the rule type, the result will vary:###### Field required ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;fieldRequired&quot;,         &quot;fieldsRequired&quot;: &quot;assignee&quot;,         &quot;ignoreContext&quot;: &quot;true&quot;,         &quot;errorMessage&quot;: &quot;An assignee must be set!&quot;       }     }Parameters: *  `fieldsRequired` the ID of the field that is required. For a custom field, it would look like `customfield_123`. *  `ignoreContext` controls the impact of context settings on field validation. When set to `true`, the validator doesn&apos;t check a required field if its context isn&apos;t configured for the current issue. When set to `false`, the validator requires a field even if its context is invalid. Allowed values: `true`, `false`. *  `errorMessage` is the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don&apos;t provide one (Optional).###### Field changed ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;fieldChanged&quot;,         &quot;groupsExemptFromValidation&quot;: &quot;6862ac20-8672-4f68-896d-4854f5efb79e&quot;,         &quot;fieldKey&quot;: &quot;versions&quot;,         &quot;errorMessage&quot;: &quot;Affect versions must be modified before transition&quot;       }     }Parameters: *  `groupsExemptFromValidation` a comma-separated list of group IDs to be exempt from the validation. *  `fieldKey` the ID of the field that has changed. For a custom field, it would look like `customfield_123`. *  `errorMessage` the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don&apos;t provide one (Optional).###### Field has a single value ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;fieldHasSingleValue&quot;,         &quot;fieldKey&quot;: &quot;created&quot;,         &quot;excludeSubtasks&quot;: &quot;true&quot;       }     }Parameters: *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`. *  `excludeSubtasks` Option to exclude values copied from sub-tasks. Allowed values: `true`, `false`.###### Field matches regular expression ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;fieldMatchesRegularExpression&quot;,         &quot;regexp&quot;: &quot;[0-9]{4}&quot;,         &quot;fieldKey&quot;: &quot;description&quot;       }     }Parameters: *  `regexp` the regular expression used to validate the field’s content. *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.###### Date field comparison ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;dateFieldComparison&quot;,         &quot;date1FieldKey&quot;: &quot;duedate&quot;,         &quot;date2FieldKey&quot;: &quot;customfield_10054&quot;,         &quot;includeTime&quot;: &quot;true&quot;,         &quot;conditionSelected&quot;: &quot;&gt;=&quot;       }     }Parameters: *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`. *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`. *  `includeTime` if `true`, compares both date and time. Allowed values: `true`, `false`. *  `conditionSelected` the condition to compare with. Allowed values: `&gt;`, `&gt;=`, `=`, `&lt;=`, `&lt;`, `!=`.###### Date range comparison ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;windowDateComparison&quot;,         &quot;date1FieldKey&quot;: &quot;customfield_10009&quot;,         &quot;date2FieldKey&quot;: &quot;customfield_10054&quot;,         &quot;numberOfDays&quot;: &quot;3&quot;       }     }Parameters: *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`. *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`. *  `numberOfDays` maximum number of days past the reference date (`date2FieldKey`) to pass validation.This rule is composed by aggregating the following legacy rules: *  FieldRequiredValidator *  FieldChangedValidator *  FieldHasSingleValueValidator *  RegexpFieldValidator *  DateFieldValidator *  WindowsDateValidator##### Proforma: Forms attached validator #####Validates that one or more forms are attached to the issue.    {       &quot;ruleKey&quot; : &quot;system:proforma-forms-attached&quot;       &quot;parameters&quot; : {}     }##### Proforma: Forms submitted validator #####Validates that all forms attached to the issue have been submitted.    {       &quot;ruleKey&quot; : &quot;system:proforma-forms-submitted&quot;       &quot;parameters&quot; : {}     }#### Conditions ####Conditions enable workflow rules that govern whether a transition can execute.##### Check field value #####A condition rule evaluates as true if a specific field&apos;s value meets the defined criteria. This rule ensures that an issue can only transition to the next step in the workflow if the field&apos;s value matches the desired condition.    {       &quot;ruleKey&quot;: &quot;system:check-field-value&quot;,       &quot;parameters&quot;: {         &quot;fieldId&quot;: &quot;description&quot;,         &quot;fieldValue&quot;: &quot;[\&quot;Done\&quot;]&quot;,         &quot;comparator&quot;: &quot;=&quot;,         &quot;comparisonType&quot;: &quot;STRING&quot;       }     }Parameters: *  `fieldId` The ID of the field to check the value of. For non-system fields, it will look like `customfield_123`. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field. *  `fieldValue` the list of values to check against the field’s value. *  `comparator` The comparison logic. Allowed values: `&gt;`, `&gt;=`, `=`, `&lt;=`, `&lt;`, `!=`. *  `comparisonType` The type of data being compared. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, `OPTIONID`.##### Restrict issue transition #####This rule ensures that issue transitions are restricted based on user accounts, roles, group memberships, and permissions, maintaining control over who can transition an issue. This condition evaluates as `true` if any of the following criteria is met.    {       &quot;ruleKey&quot;: &quot;system:restrict-issue-transition&quot;,       &quot;parameters&quot;: {         &quot;accountIds&quot;: &quot;allow-reporter,5e68ac137d64450d01a77fa0&quot;,         &quot;roleIds&quot;: &quot;10002,10004&quot;,         &quot;groupIds&quot;: &quot;703ff44a-7dc8-4f4b-9aa6-a65bf3574fa4&quot;,         &quot;permissionKeys&quot;: &quot;ADMINISTER_PROJECTS&quot;,         &quot;groupCustomFields&quot;: &quot;customfield_10028&quot;,         &quot;allowUserCustomFields&quot;: &quot;customfield_10072,customfield_10144,customfield_10007&quot;,         &quot;denyUserCustomFields&quot;: &quot;customfield_10107&quot;       }     }Parameters: *  `accountIds` a comma-separated list of the user account IDs. It also allows generic values like: `allow-assignee`, `allow-reporter`, and `accountIds` Note: This is only supported in team-managed projects *  `roleIds` a comma-separated list of role IDs. *  `groupIds` a comma-separated list of group IDs. *  `permissionKeys` a comma-separated list of permission keys. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions). *  `groupCustomFields` a comma-separated list of group custom field IDs. *  `allowUserCustomFields` a comma-separated list of user custom field IDs to allow for issue transition. *  `denyUserCustomFields` a comma-separated list of user custom field IDs to deny for issue transition.This rule is composed by aggregating the following legacy rules: *  AllowOnlyAssignee *  AllowOnlyReporter *  InAnyProjectRoleCondition *  InProjectRoleCondition *  UserInAnyGroupCondition *  UserInGroupCondition *  PermissionCondtion *  InGroupCFCondition *  UserIsInCustomFieldCondition##### Previous status condition #####A condition that evaluates based on an issue&apos;s previous status(es) and specific criteria.    {       &quot;ruleKey&quot; : &quot;system:previous-status-condition&quot;       &quot;parameters&quot; : {         &quot;previousStatusIds&quot; : &quot;10004&quot;,         &quot;not&quot;: &quot;true&quot;,         &quot;mostRecentStatusOnly&quot; : &quot;true&quot;,         &quot;includeCurrentStatus&quot;: &quot;true&quot;,         &quot;ignoreLoopTransitions&quot;: &quot;true&quot;       }     }Parameters: *  `previousStatusIds` a comma-separated list of status IDs, current only support one ID. *  `not` indicates if the condition should be reversed. When `true` it checks that the issue has not been in the selected statuses. Allowed values: `true`, `false`. *  `mostRecentStatusOnly` when true only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`. *  `includeCurrentStatus` includes the current status when evaluating if the issue has been through the selected statuses. Allowed values: `true`, `false`. *  `ignoreLoopTransitions` ignore loop transitions. Allowed values: `true`, `false`.##### Parent or child blocking condition #####A condition to block the parent’s issue transition depending on the child’s issue status.    {       &quot;ruleKey&quot; : &quot;system:parent-or-child-blocking-condition&quot;       &quot;parameters&quot; : {         &quot;blocker&quot; : &quot;CHILD&quot;,         &quot;statusIds&quot; : &quot;1,2,3&quot;       }     }Parameters: *  `blocker` currently only supports `CHILD`. *  `statusIds` a comma-separated list of status IDs.##### Separation of duties #####A condition preventing the user from performing, if the user has already performed a transition on the issue.    {       &quot;ruleKey&quot;: &quot;system:separation-of-duties&quot;,       &quot;parameters&quot;: {         &quot;fromStatusId&quot;: &quot;10161&quot;,         &quot;toStatusId&quot;: &quot;10160&quot;       }     }Parameters: *  `fromStatusId` represents the status ID from which the issue is transitioning. It ensures that the user performing the current transition has not performed any actions when the issue was in the specified status. *  `toStatusId` represents the status ID to which the issue is transitioning. It ensures that the user performing the current transition is not the same user who has previously transitioned the issue.##### Restrict transitions #####A condition preventing all users from transitioning the issue can also optionally include APIs as well.    {       &quot;ruleKey&quot;: &quot;system:restrict-from-all-users&quot;,       &quot;parameters&quot;: {         &quot;restrictMode&quot;: &quot;users&quot;       }     }Parameters: *  `restrictMode` restricts the issue transition including/excluding APIs. Allowed values: `&quot;users&quot;`, `&quot;usersAndAPI&quot;`.##### Jira Service Management block until approved #####Block an issue transition until approval. Note: This is only supported in team-managed projects.    {       &quot;ruleKey&quot;: &quot;system:jsd-approvals-block-until-approved&quot;,       &quot;parameters&quot;: {         &quot;approvalConfigurationJson&quot;: &quot;{&quot;statusExternalUuid...}&quot;       }     }Parameters: *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.##### Jira Service Management block until rejected #####Block an issue transition until rejected. Note: This is only supported in team-managed projects.    {       &quot;ruleKey&quot;: &quot;system:jsd-approvals-block-until-rejected&quot;,       &quot;parameters&quot;: {         &quot;approvalConfigurationJson&quot;: &quot;{&quot;statusExternalUuid...}&quot;       }     }Parameters: *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.##### Block in progress approval #####Condition to block issue transition if there is pending approval. Note: This is only supported in company-managed projects.    {       &quot;ruleKey&quot;: &quot;system:block-in-progress-approval&quot;,       &quot;parameters&quot;: {}     }#### Post functions ####Post functions carry out any additional processing required after a workflow transition is executed.##### Change assignee #####A post function rule that changes the assignee of an issue after a transition.    {       &quot;ruleKey&quot;: &quot;system:change-assignee&quot;,       &quot;parameters&quot;: {         &quot;type&quot;: &quot;to-selected-user&quot;,         &quot;accountId&quot;: &quot;example-account-id&quot;       }     }Parameters: *  `type` the parameter used to determine the new assignee. Allowed values: `to-selected-user`, `to-unassigned`, `to-current-user`, `to-current-user`, `to-default-user`, `to-default-user` *  `accountId` the account ID of the user to assign the issue to. This parameter is required only when the type is `&quot;to-selected-user&quot;`.##### Copy field value #####A post function that automates the process of copying values between fields during a specific transition, ensuring data consistency and reducing manual effort.    {       &quot;ruleKey&quot;: &quot;system:copy-value-from-other-field&quot;,       &quot;parameters&quot;: {         &quot;sourceFieldKey&quot;: &quot;description&quot;,         &quot;targetFieldKey&quot;: &quot;components&quot;,         &quot;issueSource&quot;: &quot;SAME&quot;       }     }Parameters: *  `sourceFieldKey` the field key to copy from. For a custom field, it would look like `customfield_123` *  `targetFieldKey` the field key to copy to. For a custom field, it would look like `customfield_123` *  `issueSource` `SAME` or `PARENT`. Defaults to `SAME` if no value is provided.##### Update field #####A post function that updates or appends a specific field with the given value.    {       &quot;ruleKey&quot;: &quot;system:update-field&quot;,       &quot;parameters&quot;: {         &quot;field&quot;: &quot;customfield_10056&quot;,         &quot;value&quot;: &quot;asdf&quot;,         &quot;mode&quot;: &quot;append&quot;       }     }Parameters: *  `field` the ID of the field to update. For a custom field, it would look like `customfield_123` *  `value` the value to update the field with. *  `mode` `append` or `replace`. Determines if a value will be appended to the current value, or if the current value will be replaced.##### Trigger webhook #####A post function that automatically triggers a predefined webhook when a transition occurs in the workflow.    {       &quot;ruleKey&quot;: &quot;system:trigger-webhook&quot;,       &quot;parameters&quot;: {         &quot;webhookId&quot;: &quot;1&quot;       }     }Parameters: *  `webhookId` the ID of the webhook.#### Screen ######### Remind people to update fields #####A screen rule that prompts users to update a specific field when they interact with an issue screen during a transition. This rule is useful for ensuring that users provide or modify necessary information before moving an issue to the next step in the workflow.    {       &quot;ruleKey&quot;: &quot;system:remind-people-to-update-fields&quot;,       &quot;params&quot;: {         &quot;remindingFieldIds&quot;: &quot;assignee,customfield_10025&quot;,         &quot;remindingMessage&quot;: &quot;The message&quot;,         &quot;remindingAlwaysAsk&quot;: &quot;true&quot;       }     }Parameters: *  `remindingFieldIds` a comma-separated list of field IDs. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field. *  `remindingMessage` the message to display when prompting the users to update the fields. *  `remindingAlwaysAsk` always remind to update fields. Allowed values: `true`, `false`.##### Shared transition screen #####A common screen that is shared between transitions in a workflow.    {       &quot;ruleKey&quot;: &quot;system:transition-screen&quot;,       &quot;params&quot;: {         &quot;screenId&quot;: &quot;3&quot;       }     }Parameters: *  `screenId` the ID of the screen.#### Connect &amp; Forge ######### Connect rules #####Validator/Condition/Post function for Connect app.    {       &quot;ruleKey&quot;: &quot;connect:expression-validator&quot;,       &quot;parameters&quot;: {         &quot;appKey&quot;: &quot;com.atlassian.app&quot;,         &quot;config&quot;: &quot;&quot;,         &quot;id&quot;: &quot;90ce590f-e90c-4cd3-8281-165ce41f2ac3&quot;,         &quot;disabled&quot;: &quot;false&quot;,         &quot;tag&quot;: &quot;&quot;       }     }Parameters: *  `ruleKey` Validator: `connect:expression-validator`, Condition: `connect:expression-condition`, and Post function: `connect:remote-workflow-function` *  `appKey` the reference to the Connect app *  `config` a JSON payload string describing the configuration *  `id` the ID of the rule *  `disabled` determine if the Connect app is disabled. Allowed values: `true`, `false`. *  `tag` additional tags for the Connect app##### Forge rules #####Validator/Condition/Post function for Forge app.    {       &quot;ruleKey&quot;: &quot;forge:expression-validator&quot;,       &quot;parameters&quot;: {         &quot;key&quot;: &quot;ari:cloud:ecosystem::extension/{appId}/{environmentId}/static/{moduleKey}&quot;,         &quot;config&quot;: &quot;{&quot;searchString&quot;:&quot;workflow validator&quot;}&quot;,         &quot;id&quot;: &quot;a865ddf6-bb3f-4a7b-9540-c2f8b3f9f6c2&quot;       }     }Parameters: *  `ruleKey` Validator: `forge:expression-validator`, Condition: `forge:expression-condition`, and Post function: `forge:workflow-post-function` *  `key` the identifier for the Forge app *  `config` the persistent stringified JSON configuration for the Forge rule *  `id` the ID of the Forge rule
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<CapabilitiesRequestBuilderGetRequestConfiguration>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<CapabilitiesRequestBuilderGetRequestConfiguration> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation {
                HttpMethod = Method.GET,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            requestInfo.Headers.Add("Accept", "application/json");
            if (requestConfiguration != null) {
                var requestConfig = new CapabilitiesRequestBuilderGetRequestConfiguration();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddQueryParameters(requestConfig.QueryParameters);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public CapabilitiesRequestBuilder WithUrl(string rawUrl) {
            return new CapabilitiesRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Get the list of workflow capabilities for a specific workflow using either the workflow ID, or the project and issue type ID pair. The response includes the scope of the workflow, defined as global/project-based, and a list of project types that the workflow is scoped to. It also includes all rules organised into their broad categories (conditions, validators, actions, triggers, screens) as well as the source location (Atlassian-provided, Connect, Forge).**[Permissions](#permissions) required:** *  *Administer Jira* project permission to access all, including global-scoped, workflows *  *Administer projects* project permissions to access project-scoped workflowsThe current list of Atlassian-provided rules:#### Validators ####A validator rule that checks if a user has the required permissions to execute the transition in the workflow.##### Permission validator #####A validator rule that checks if a user has the required permissions to execute the transition in the workflow.    {       &quot;ruleKey&quot;: &quot;system:check-permission-validator&quot;,       &quot;parameters&quot;: {         &quot;permissionKey&quot;: &quot;ADMINISTER_PROJECTS&quot;       }     }Parameters: *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).##### Parent or child blocking validator #####A validator to block the child issue’s transition depending on the parent issue’s status.    {       &quot;ruleKey&quot; : &quot;system:parent-or-child-blocking-validator&quot;       &quot;parameters&quot; : {         &quot;blocker&quot; : &quot;PARENT&quot;         &quot;statusIds&quot; : &quot;1,2,3&quot;       }     }Parameters: *  `blocker` currently only supports `PARENT`. *  `statusIds` a comma-separated list of status IDs.##### Previous status validator #####A validator that checks if an issue has transitioned through specified previous status(es) before allowing the current transition to occur.    {       &quot;ruleKey&quot;: &quot;system:previous-status-validator&quot;,       &quot;parameters&quot;: {         &quot;previousStatusIds&quot;: &quot;10014&quot;,         &quot;mostRecentStatusOnly&quot;: &quot;true&quot;       }     }Parameters: *  `previousStatusIds` a comma-separated list of status IDs, currently only support one ID. *  `mostRecentStatusOnly` when `true` only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.##### Validate a field value #####A validation that ensures a specific field&apos;s value meets the defined criteria before allowing an issue to transition in the workflow.Depending on the rule type, the result will vary:###### Field required ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;fieldRequired&quot;,         &quot;fieldsRequired&quot;: &quot;assignee&quot;,         &quot;ignoreContext&quot;: &quot;true&quot;,         &quot;errorMessage&quot;: &quot;An assignee must be set!&quot;       }     }Parameters: *  `fieldsRequired` the ID of the field that is required. For a custom field, it would look like `customfield_123`. *  `ignoreContext` controls the impact of context settings on field validation. When set to `true`, the validator doesn&apos;t check a required field if its context isn&apos;t configured for the current issue. When set to `false`, the validator requires a field even if its context is invalid. Allowed values: `true`, `false`. *  `errorMessage` is the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don&apos;t provide one (Optional).###### Field changed ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;fieldChanged&quot;,         &quot;groupsExemptFromValidation&quot;: &quot;6862ac20-8672-4f68-896d-4854f5efb79e&quot;,         &quot;fieldKey&quot;: &quot;versions&quot;,         &quot;errorMessage&quot;: &quot;Affect versions must be modified before transition&quot;       }     }Parameters: *  `groupsExemptFromValidation` a comma-separated list of group IDs to be exempt from the validation. *  `fieldKey` the ID of the field that has changed. For a custom field, it would look like `customfield_123`. *  `errorMessage` the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don&apos;t provide one (Optional).###### Field has a single value ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;fieldHasSingleValue&quot;,         &quot;fieldKey&quot;: &quot;created&quot;,         &quot;excludeSubtasks&quot;: &quot;true&quot;       }     }Parameters: *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`. *  `excludeSubtasks` Option to exclude values copied from sub-tasks. Allowed values: `true`, `false`.###### Field matches regular expression ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;fieldMatchesRegularExpression&quot;,         &quot;regexp&quot;: &quot;[0-9]{4}&quot;,         &quot;fieldKey&quot;: &quot;description&quot;       }     }Parameters: *  `regexp` the regular expression used to validate the field’s content. *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.###### Date field comparison ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;dateFieldComparison&quot;,         &quot;date1FieldKey&quot;: &quot;duedate&quot;,         &quot;date2FieldKey&quot;: &quot;customfield_10054&quot;,         &quot;includeTime&quot;: &quot;true&quot;,         &quot;conditionSelected&quot;: &quot;&gt;=&quot;       }     }Parameters: *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`. *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`. *  `includeTime` if `true`, compares both date and time. Allowed values: `true`, `false`. *  `conditionSelected` the condition to compare with. Allowed values: `&gt;`, `&gt;=`, `=`, `&lt;=`, `&lt;`, `!=`.###### Date range comparison ######    {       &quot;ruleKey&quot;: &quot;system:validate-field-value&quot;,       &quot;parameters&quot;: {         &quot;ruleType&quot;: &quot;windowDateComparison&quot;,         &quot;date1FieldKey&quot;: &quot;customfield_10009&quot;,         &quot;date2FieldKey&quot;: &quot;customfield_10054&quot;,         &quot;numberOfDays&quot;: &quot;3&quot;       }     }Parameters: *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`. *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`. *  `numberOfDays` maximum number of days past the reference date (`date2FieldKey`) to pass validation.This rule is composed by aggregating the following legacy rules: *  FieldRequiredValidator *  FieldChangedValidator *  FieldHasSingleValueValidator *  RegexpFieldValidator *  DateFieldValidator *  WindowsDateValidator##### Proforma: Forms attached validator #####Validates that one or more forms are attached to the issue.    {       &quot;ruleKey&quot; : &quot;system:proforma-forms-attached&quot;       &quot;parameters&quot; : {}     }##### Proforma: Forms submitted validator #####Validates that all forms attached to the issue have been submitted.    {       &quot;ruleKey&quot; : &quot;system:proforma-forms-submitted&quot;       &quot;parameters&quot; : {}     }#### Conditions ####Conditions enable workflow rules that govern whether a transition can execute.##### Check field value #####A condition rule evaluates as true if a specific field&apos;s value meets the defined criteria. This rule ensures that an issue can only transition to the next step in the workflow if the field&apos;s value matches the desired condition.    {       &quot;ruleKey&quot;: &quot;system:check-field-value&quot;,       &quot;parameters&quot;: {         &quot;fieldId&quot;: &quot;description&quot;,         &quot;fieldValue&quot;: &quot;[\&quot;Done\&quot;]&quot;,         &quot;comparator&quot;: &quot;=&quot;,         &quot;comparisonType&quot;: &quot;STRING&quot;       }     }Parameters: *  `fieldId` The ID of the field to check the value of. For non-system fields, it will look like `customfield_123`. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field. *  `fieldValue` the list of values to check against the field’s value. *  `comparator` The comparison logic. Allowed values: `&gt;`, `&gt;=`, `=`, `&lt;=`, `&lt;`, `!=`. *  `comparisonType` The type of data being compared. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, `OPTIONID`.##### Restrict issue transition #####This rule ensures that issue transitions are restricted based on user accounts, roles, group memberships, and permissions, maintaining control over who can transition an issue. This condition evaluates as `true` if any of the following criteria is met.    {       &quot;ruleKey&quot;: &quot;system:restrict-issue-transition&quot;,       &quot;parameters&quot;: {         &quot;accountIds&quot;: &quot;allow-reporter,5e68ac137d64450d01a77fa0&quot;,         &quot;roleIds&quot;: &quot;10002,10004&quot;,         &quot;groupIds&quot;: &quot;703ff44a-7dc8-4f4b-9aa6-a65bf3574fa4&quot;,         &quot;permissionKeys&quot;: &quot;ADMINISTER_PROJECTS&quot;,         &quot;groupCustomFields&quot;: &quot;customfield_10028&quot;,         &quot;allowUserCustomFields&quot;: &quot;customfield_10072,customfield_10144,customfield_10007&quot;,         &quot;denyUserCustomFields&quot;: &quot;customfield_10107&quot;       }     }Parameters: *  `accountIds` a comma-separated list of the user account IDs. It also allows generic values like: `allow-assignee`, `allow-reporter`, and `accountIds` Note: This is only supported in team-managed projects *  `roleIds` a comma-separated list of role IDs. *  `groupIds` a comma-separated list of group IDs. *  `permissionKeys` a comma-separated list of permission keys. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions). *  `groupCustomFields` a comma-separated list of group custom field IDs. *  `allowUserCustomFields` a comma-separated list of user custom field IDs to allow for issue transition. *  `denyUserCustomFields` a comma-separated list of user custom field IDs to deny for issue transition.This rule is composed by aggregating the following legacy rules: *  AllowOnlyAssignee *  AllowOnlyReporter *  InAnyProjectRoleCondition *  InProjectRoleCondition *  UserInAnyGroupCondition *  UserInGroupCondition *  PermissionCondtion *  InGroupCFCondition *  UserIsInCustomFieldCondition##### Previous status condition #####A condition that evaluates based on an issue&apos;s previous status(es) and specific criteria.    {       &quot;ruleKey&quot; : &quot;system:previous-status-condition&quot;       &quot;parameters&quot; : {         &quot;previousStatusIds&quot; : &quot;10004&quot;,         &quot;not&quot;: &quot;true&quot;,         &quot;mostRecentStatusOnly&quot; : &quot;true&quot;,         &quot;includeCurrentStatus&quot;: &quot;true&quot;,         &quot;ignoreLoopTransitions&quot;: &quot;true&quot;       }     }Parameters: *  `previousStatusIds` a comma-separated list of status IDs, current only support one ID. *  `not` indicates if the condition should be reversed. When `true` it checks that the issue has not been in the selected statuses. Allowed values: `true`, `false`. *  `mostRecentStatusOnly` when true only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`. *  `includeCurrentStatus` includes the current status when evaluating if the issue has been through the selected statuses. Allowed values: `true`, `false`. *  `ignoreLoopTransitions` ignore loop transitions. Allowed values: `true`, `false`.##### Parent or child blocking condition #####A condition to block the parent’s issue transition depending on the child’s issue status.    {       &quot;ruleKey&quot; : &quot;system:parent-or-child-blocking-condition&quot;       &quot;parameters&quot; : {         &quot;blocker&quot; : &quot;CHILD&quot;,         &quot;statusIds&quot; : &quot;1,2,3&quot;       }     }Parameters: *  `blocker` currently only supports `CHILD`. *  `statusIds` a comma-separated list of status IDs.##### Separation of duties #####A condition preventing the user from performing, if the user has already performed a transition on the issue.    {       &quot;ruleKey&quot;: &quot;system:separation-of-duties&quot;,       &quot;parameters&quot;: {         &quot;fromStatusId&quot;: &quot;10161&quot;,         &quot;toStatusId&quot;: &quot;10160&quot;       }     }Parameters: *  `fromStatusId` represents the status ID from which the issue is transitioning. It ensures that the user performing the current transition has not performed any actions when the issue was in the specified status. *  `toStatusId` represents the status ID to which the issue is transitioning. It ensures that the user performing the current transition is not the same user who has previously transitioned the issue.##### Restrict transitions #####A condition preventing all users from transitioning the issue can also optionally include APIs as well.    {       &quot;ruleKey&quot;: &quot;system:restrict-from-all-users&quot;,       &quot;parameters&quot;: {         &quot;restrictMode&quot;: &quot;users&quot;       }     }Parameters: *  `restrictMode` restricts the issue transition including/excluding APIs. Allowed values: `&quot;users&quot;`, `&quot;usersAndAPI&quot;`.##### Jira Service Management block until approved #####Block an issue transition until approval. Note: This is only supported in team-managed projects.    {       &quot;ruleKey&quot;: &quot;system:jsd-approvals-block-until-approved&quot;,       &quot;parameters&quot;: {         &quot;approvalConfigurationJson&quot;: &quot;{&quot;statusExternalUuid...}&quot;       }     }Parameters: *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.##### Jira Service Management block until rejected #####Block an issue transition until rejected. Note: This is only supported in team-managed projects.    {       &quot;ruleKey&quot;: &quot;system:jsd-approvals-block-until-rejected&quot;,       &quot;parameters&quot;: {         &quot;approvalConfigurationJson&quot;: &quot;{&quot;statusExternalUuid...}&quot;       }     }Parameters: *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.##### Block in progress approval #####Condition to block issue transition if there is pending approval. Note: This is only supported in company-managed projects.    {       &quot;ruleKey&quot;: &quot;system:block-in-progress-approval&quot;,       &quot;parameters&quot;: {}     }#### Post functions ####Post functions carry out any additional processing required after a workflow transition is executed.##### Change assignee #####A post function rule that changes the assignee of an issue after a transition.    {       &quot;ruleKey&quot;: &quot;system:change-assignee&quot;,       &quot;parameters&quot;: {         &quot;type&quot;: &quot;to-selected-user&quot;,         &quot;accountId&quot;: &quot;example-account-id&quot;       }     }Parameters: *  `type` the parameter used to determine the new assignee. Allowed values: `to-selected-user`, `to-unassigned`, `to-current-user`, `to-current-user`, `to-default-user`, `to-default-user` *  `accountId` the account ID of the user to assign the issue to. This parameter is required only when the type is `&quot;to-selected-user&quot;`.##### Copy field value #####A post function that automates the process of copying values between fields during a specific transition, ensuring data consistency and reducing manual effort.    {       &quot;ruleKey&quot;: &quot;system:copy-value-from-other-field&quot;,       &quot;parameters&quot;: {         &quot;sourceFieldKey&quot;: &quot;description&quot;,         &quot;targetFieldKey&quot;: &quot;components&quot;,         &quot;issueSource&quot;: &quot;SAME&quot;       }     }Parameters: *  `sourceFieldKey` the field key to copy from. For a custom field, it would look like `customfield_123` *  `targetFieldKey` the field key to copy to. For a custom field, it would look like `customfield_123` *  `issueSource` `SAME` or `PARENT`. Defaults to `SAME` if no value is provided.##### Update field #####A post function that updates or appends a specific field with the given value.    {       &quot;ruleKey&quot;: &quot;system:update-field&quot;,       &quot;parameters&quot;: {         &quot;field&quot;: &quot;customfield_10056&quot;,         &quot;value&quot;: &quot;asdf&quot;,         &quot;mode&quot;: &quot;append&quot;       }     }Parameters: *  `field` the ID of the field to update. For a custom field, it would look like `customfield_123` *  `value` the value to update the field with. *  `mode` `append` or `replace`. Determines if a value will be appended to the current value, or if the current value will be replaced.##### Trigger webhook #####A post function that automatically triggers a predefined webhook when a transition occurs in the workflow.    {       &quot;ruleKey&quot;: &quot;system:trigger-webhook&quot;,       &quot;parameters&quot;: {         &quot;webhookId&quot;: &quot;1&quot;       }     }Parameters: *  `webhookId` the ID of the webhook.#### Screen ######### Remind people to update fields #####A screen rule that prompts users to update a specific field when they interact with an issue screen during a transition. This rule is useful for ensuring that users provide or modify necessary information before moving an issue to the next step in the workflow.    {       &quot;ruleKey&quot;: &quot;system:remind-people-to-update-fields&quot;,       &quot;params&quot;: {         &quot;remindingFieldIds&quot;: &quot;assignee,customfield_10025&quot;,         &quot;remindingMessage&quot;: &quot;The message&quot;,         &quot;remindingAlwaysAsk&quot;: &quot;true&quot;       }     }Parameters: *  `remindingFieldIds` a comma-separated list of field IDs. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field. *  `remindingMessage` the message to display when prompting the users to update the fields. *  `remindingAlwaysAsk` always remind to update fields. Allowed values: `true`, `false`.##### Shared transition screen #####A common screen that is shared between transitions in a workflow.    {       &quot;ruleKey&quot;: &quot;system:transition-screen&quot;,       &quot;params&quot;: {         &quot;screenId&quot;: &quot;3&quot;       }     }Parameters: *  `screenId` the ID of the screen.#### Connect &amp; Forge ######### Connect rules #####Validator/Condition/Post function for Connect app.    {       &quot;ruleKey&quot;: &quot;connect:expression-validator&quot;,       &quot;parameters&quot;: {         &quot;appKey&quot;: &quot;com.atlassian.app&quot;,         &quot;config&quot;: &quot;&quot;,         &quot;id&quot;: &quot;90ce590f-e90c-4cd3-8281-165ce41f2ac3&quot;,         &quot;disabled&quot;: &quot;false&quot;,         &quot;tag&quot;: &quot;&quot;       }     }Parameters: *  `ruleKey` Validator: `connect:expression-validator`, Condition: `connect:expression-condition`, and Post function: `connect:remote-workflow-function` *  `appKey` the reference to the Connect app *  `config` a JSON payload string describing the configuration *  `id` the ID of the rule *  `disabled` determine if the Connect app is disabled. Allowed values: `true`, `false`. *  `tag` additional tags for the Connect app##### Forge rules #####Validator/Condition/Post function for Forge app.    {       &quot;ruleKey&quot;: &quot;forge:expression-validator&quot;,       &quot;parameters&quot;: {         &quot;key&quot;: &quot;ari:cloud:ecosystem::extension/{appId}/{environmentId}/static/{moduleKey}&quot;,         &quot;config&quot;: &quot;{&quot;searchString&quot;:&quot;workflow validator&quot;}&quot;,         &quot;id&quot;: &quot;a865ddf6-bb3f-4a7b-9540-c2f8b3f9f6c2&quot;       }     }Parameters: *  `ruleKey` Validator: `forge:expression-validator`, Condition: `forge:expression-condition`, and Post function: `forge:workflow-post-function` *  `key` the identifier for the Forge app *  `config` the persistent stringified JSON configuration for the Forge rule *  `id` the ID of the Forge rule
        /// </summary>
        public class CapabilitiesRequestBuilderGetQueryParameters {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("issueTypeId")]
            public string? IssueTypeId { get; set; }
#nullable restore
#else
            [QueryParameter("issueTypeId")]
            public string IssueTypeId { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("projectId")]
            public string? ProjectId { get; set; }
#nullable restore
#else
            [QueryParameter("projectId")]
            public string ProjectId { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("workflowId")]
            public string? WorkflowId { get; set; }
#nullable restore
#else
            [QueryParameter("workflowId")]
            public string WorkflowId { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class CapabilitiesRequestBuilderGetRequestConfiguration {
            /// <summary>Request headers</summary>
            public RequestHeaders Headers { get; set; }
            /// <summary>Request options</summary>
            public IList<IRequestOption> Options { get; set; }
            /// <summary>Request query parameters</summary>
            public CapabilitiesRequestBuilderGetQueryParameters QueryParameters { get; set; } = new CapabilitiesRequestBuilderGetQueryParameters();
            /// <summary>
            /// Instantiates a new capabilitiesRequestBuilderGetRequestConfiguration and sets the default values.
            /// </summary>
            public CapabilitiesRequestBuilderGetRequestConfiguration() {
                Options = new List<IRequestOption>();
                Headers = new RequestHeaders();
            }
        }
    }
}
