// <auto-generated/>
using AtlassianClient.Models;
using AtlassianClient.Rest.Api.Three.Issue.Item.Assignee;
using AtlassianClient.Rest.Api.Three.Issue.Item.Attachments;
using AtlassianClient.Rest.Api.Three.Issue.Item.Changelog;
using AtlassianClient.Rest.Api.Three.Issue.Item.Comment;
using AtlassianClient.Rest.Api.Three.Issue.Item.Editmeta;
using AtlassianClient.Rest.Api.Three.Issue.Item.Notify;
using AtlassianClient.Rest.Api.Three.Issue.Item.Properties;
using AtlassianClient.Rest.Api.Three.Issue.Item.Remotelink;
using AtlassianClient.Rest.Api.Three.Issue.Item.Transitions;
using AtlassianClient.Rest.Api.Three.Issue.Item.Votes;
using AtlassianClient.Rest.Api.Three.Issue.Item.Watchers;
using AtlassianClient.Rest.Api.Three.Issue.Item.Worklog;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace AtlassianClient.Rest.Api.Three.Issue.Item {
    /// <summary>
    /// Builds and executes requests for operations under \rest\api\3\issue\{issueIdOrKey}
    /// </summary>
    public class WithIssueIdOrKeyItemRequestBuilder : BaseRequestBuilder {
        /// <summary>The assignee property</summary>
        public AssigneeRequestBuilder Assignee { get =>
            new AssigneeRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The attachments property</summary>
        public AttachmentsRequestBuilder Attachments { get =>
            new AttachmentsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The changelog property</summary>
        public ChangelogRequestBuilder Changelog { get =>
            new ChangelogRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The comment property</summary>
        public CommentRequestBuilder Comment { get =>
            new CommentRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The editmeta property</summary>
        public EditmetaRequestBuilder Editmeta { get =>
            new EditmetaRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The notify property</summary>
        public NotifyRequestBuilder Notify { get =>
            new NotifyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The properties property</summary>
        public PropertiesRequestBuilder Properties { get =>
            new PropertiesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The remotelink property</summary>
        public RemotelinkRequestBuilder Remotelink { get =>
            new RemotelinkRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The transitions property</summary>
        public TransitionsRequestBuilder Transitions { get =>
            new TransitionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The votes property</summary>
        public VotesRequestBuilder Votes { get =>
            new VotesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The watchers property</summary>
        public WatchersRequestBuilder Watchers { get =>
            new WatchersRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The worklog property</summary>
        public WorklogRequestBuilder Worklog { get =>
            new WorklogRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new WithIssueIdOrKeyItemRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithIssueIdOrKeyItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/api/3/issue/{issueIdOrKey}{?fields*,fieldsByKeys*,expand*,properties*,updateHistory*,notifyUsers*,overrideScreenSecurity*,overrideEditableFlag*,returnIssue*,deleteSubtasks*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new WithIssueIdOrKeyItemRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithIssueIdOrKeyItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/api/3/issue/{issueIdOrKey}{?fields*,fieldsByKeys*,expand*,properties*,updateHistory*,notifyUsers*,overrideScreenSecurity*,overrideEditableFlag*,returnIssue*,deleteSubtasks*}", rawUrl) {
        }
        /// <summary>
        /// Deletes an issue.An issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`. This causes the issue&apos;s subtasks to be deleted with the issue.This operation can be accessed anonymously.**[Permissions](#permissions) required:** *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue. *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<WithIssueIdOrKeyItemRequestBuilderDeleteRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task DeleteAsync(Action<WithIssueIdOrKeyItemRequestBuilderDeleteRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the details for an issue.The issue is identified by its ID or key, however, if the identifier doesn&apos;t match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.This operation can be accessed anonymously.**[Permissions](#permissions) required:** *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<IssueBean?> GetAsync(Action<WithIssueIdOrKeyItemRequestBuilderGetRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<IssueBean> GetAsync(Action<WithIssueIdOrKeyItemRequestBuilderGetRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<IssueBean>(requestInfo, IssueBean.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Deletes an issue.An issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`. This causes the issue&apos;s subtasks to be deleted with the issue.This operation can be accessed anonymously.**[Permissions](#permissions) required:** *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue. *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<WithIssueIdOrKeyItemRequestBuilderDeleteRequestConfiguration>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<WithIssueIdOrKeyItemRequestBuilderDeleteRequestConfiguration> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation {
                HttpMethod = Method.DELETE,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            if (requestConfiguration != null) {
                var requestConfig = new WithIssueIdOrKeyItemRequestBuilderDeleteRequestConfiguration();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddQueryParameters(requestConfig.QueryParameters);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            return requestInfo;
        }
        /// <summary>
        /// Returns the details for an issue.The issue is identified by its ID or key, however, if the identifier doesn&apos;t match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.This operation can be accessed anonymously.**[Permissions](#permissions) required:** *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<WithIssueIdOrKeyItemRequestBuilderGetRequestConfiguration>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<WithIssueIdOrKeyItemRequestBuilderGetRequestConfiguration> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation {
                HttpMethod = Method.GET,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            requestInfo.Headers.Add("Accept", "application/json");
            if (requestConfiguration != null) {
                var requestConfig = new WithIssueIdOrKeyItemRequestBuilderGetRequestConfiguration();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddQueryParameters(requestConfig.QueryParameters);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public WithIssueIdOrKeyItemRequestBuilder WithUrl(string rawUrl) {
            return new WithIssueIdOrKeyItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Deletes an issue.An issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`. This causes the issue&apos;s subtasks to be deleted with the issue.This operation can be accessed anonymously.**[Permissions](#permissions) required:** *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue. *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </summary>
        public class WithIssueIdOrKeyItemRequestBuilderDeleteQueryParameters {
            /// <summary>Whether the issue&apos;s subtasks are deleted when the issue is deleted.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("deleteSubtasks")]
            public string? DeleteSubtasks { get; set; }
#nullable restore
#else
            [QueryParameter("deleteSubtasks")]
            public string DeleteSubtasks { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class WithIssueIdOrKeyItemRequestBuilderDeleteRequestConfiguration {
            /// <summary>Request headers</summary>
            public RequestHeaders Headers { get; set; }
            /// <summary>Request options</summary>
            public IList<IRequestOption> Options { get; set; }
            /// <summary>Request query parameters</summary>
            public WithIssueIdOrKeyItemRequestBuilderDeleteQueryParameters QueryParameters { get; set; } = new WithIssueIdOrKeyItemRequestBuilderDeleteQueryParameters();
            /// <summary>
            /// Instantiates a new WithIssueIdOrKeyItemRequestBuilderDeleteRequestConfiguration and sets the default values.
            /// </summary>
            public WithIssueIdOrKeyItemRequestBuilderDeleteRequestConfiguration() {
                Options = new List<IRequestOption>();
                Headers = new RequestHeaders();
            }
        }
        /// <summary>
        /// Returns the details for an issue.The issue is identified by its ID or key, however, if the identifier doesn&apos;t match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.This operation can be accessed anonymously.**[Permissions](#permissions) required:** *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </summary>
        public class WithIssueIdOrKeyItemRequestBuilderGetQueryParameters {
            /// <summary>Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include: *  `renderedFields` Returns field values rendered in HTML format. *  `names` Returns the display name of each field. *  `schema` Returns the schema describing a field type. *  `transitions` Returns all possible transitions for the issue. *  `editmeta` Returns information about how each field can be edited. *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent. *  `versionedRepresentations` Returns a JSON array for each version of a field&apos;s value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("expand")]
            public string? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("expand")]
            public string Expand { get; set; }
#endif
            /// <summary>A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values: *  `*all` Returns all fields. *  `*navigable` Returns navigable fields. *  Any issue field, prefixed with a minus to exclude.Examples: *  `summary,comment` Returns only the summary and comments fields. *  `-description` Returns all (default) fields except description. *  `*navigable,-comment` Returns all navigable fields except comment.This parameter may be specified multiple times. For example, `fields=field1,field2&amp; fields=field3`.Note: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-3-search-get) and [Search for issues using JQL (POST)](#api-rest-api-3-search-post) where the default is all navigable fields.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fields")]
            public string[]? Fields { get; set; }
#nullable restore
#else
            [QueryParameter("fields")]
            public string[] Fields { get; set; }
#endif
            /// <summary>Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field&apos;s key may differ from its ID.</summary>
            [QueryParameter("fieldsByKeys")]
            public bool? FieldsByKeys { get; set; }
            /// <summary>A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values: *  `*all` Returns all issue properties. *  Any issue property key, prefixed with a minus to exclude.Examples: *  `*all` Returns all properties. *  `*all,-prop1` Returns all properties except `prop1`. *  `prop1,prop2` Returns `prop1` and `prop2` properties.This parameter may be specified multiple times. For example, `properties=prop1,prop2&amp; properties=prop3`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("properties")]
            public string[]? Properties { get; set; }
#nullable restore
#else
            [QueryParameter("properties")]
            public string[] Properties { get; set; }
#endif
            /// <summary>Whether the project in which the issue is created is added to the user&apos;s **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) `lastViewed` field.</summary>
            [QueryParameter("updateHistory")]
            public bool? UpdateHistory { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class WithIssueIdOrKeyItemRequestBuilderGetRequestConfiguration {
            /// <summary>Request headers</summary>
            public RequestHeaders Headers { get; set; }
            /// <summary>Request options</summary>
            public IList<IRequestOption> Options { get; set; }
            /// <summary>Request query parameters</summary>
            public WithIssueIdOrKeyItemRequestBuilderGetQueryParameters QueryParameters { get; set; } = new WithIssueIdOrKeyItemRequestBuilderGetQueryParameters();
            /// <summary>
            /// Instantiates a new WithIssueIdOrKeyItemRequestBuilderGetRequestConfiguration and sets the default values.
            /// </summary>
            public WithIssueIdOrKeyItemRequestBuilderGetRequestConfiguration() {
                Options = new List<IRequestOption>();
                Headers = new RequestHeaders();
            }
        }
        /// <summary>
        /// Edits an issue. A transition may be applied and issue properties updated as part of the edit.The edits to the issue&apos;s fields are defined using `update` and `fields`. The fields that can be edited are determined using [ Get edit issue metadata](#api-rest-api-3-issue-issueIdOrKey-editmeta-get).The parent field may be set by key or ID. For standard issue types, the parent may be removed by setting `update.parent.set.none` to *true*. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don&apos;t handle Atlassian Document Format content.Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.This operation can be accessed anonymously.**[Permissions](#permissions) required:** *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </summary>
        public class WithIssueIdOrKeyItemRequestBuilderPutQueryParameters {
            /// <summary>The Get issue API expand parameter to use in the response if the `returnIssue` parameter is `true`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("expand")]
            public string? Expand { get; set; }
#nullable restore
#else
            [QueryParameter("expand")]
            public string Expand { get; set; }
#endif
            /// <summary>Whether a notification email about the issue update is sent to all watchers. To disable the notification, administer Jira or administer project permissions are required. If the user doesn&apos;t have the necessary permission the request is ignored.</summary>
            [QueryParameter("notifyUsers")]
            public bool? NotifyUsers { get; set; }
            /// <summary>Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</summary>
            [QueryParameter("overrideEditableFlag")]
            public bool? OverrideEditableFlag { get; set; }
            /// <summary>Whether screen security is overridden to enable hidden fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</summary>
            [QueryParameter("overrideScreenSecurity")]
            public bool? OverrideScreenSecurity { get; set; }
            /// <summary>Whether the response should contain the issue with fields edited in this request. The returned issue will have the same format as in the [Get issue API](#api-rest-api-3-issue-issueidorkey-get).</summary>
            [QueryParameter("returnIssue")]
            public bool? ReturnIssue { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class WithIssueIdOrKeyItemRequestBuilderPutRequestConfiguration {
        }
    }
}
