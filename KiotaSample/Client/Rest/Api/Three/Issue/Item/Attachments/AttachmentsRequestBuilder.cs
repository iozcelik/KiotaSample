// <auto-generated/>
using AtlassianClient.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace AtlassianClient.Rest.Api.Three.Issue.Item.Attachments {
    /// <summary>
    /// Builds and executes requests for operations under \rest\api\3\issue\{issueIdOrKey}\attachments
    /// </summary>
    public class AttachmentsRequestBuilder : BaseRequestBuilder {
        /// <summary>
        /// Instantiates a new AttachmentsRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AttachmentsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/api/3/issue/{issueIdOrKey}/attachments", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new AttachmentsRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AttachmentsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/api/3/issue/{issueIdOrKey}/attachments", rawUrl) {
        }
        /// <summary>
        /// Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).Note that: *  The request must have a `X-Atlassian-Token: no-check` header, if not it is blocked. See [Special headers](#special-request-headers) for more information. *  The name of the multipart/form-data parameter that contains the attachments must be `file`.The following examples upload a file called *myfile.txt* to the issue *TEST-123*:#### curl ####    curl --location --request POST &apos;https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments&apos;     -u &apos;email@example.com:&lt;api_token&gt;&apos;     -H &apos;X-Atlassian-Token: no-check&apos;     --form &apos;file=@&quot;myfile.txt&quot;&apos;#### Node.js ####    // This code sample uses the &apos;node-fetch&apos; and &apos;form-data&apos; libraries:     // https://www.npmjs.com/package/node-fetch     // https://www.npmjs.com/package/form-data     const fetch = require(&apos;node-fetch&apos;);     const FormData = require(&apos;form-data&apos;);     const fs = require(&apos;fs&apos;);         const filePath = &apos;myfile.txt&apos;;     const form = new FormData();     const stats = fs.statSync(filePath);     const fileSizeInBytes = stats.size;     const fileStream = fs.createReadStream(filePath);         form.append(&apos;file&apos;, fileStream, {knownLength: fileSizeInBytes});         fetch(&apos;https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments&apos;, {         method: &apos;POST&apos;,         body: form,         headers: {             &apos;Authorization&apos;: `Basic ${Buffer.from(                 &apos;email@example.com:&apos;             ).toString(&apos;base64&apos;)}`,             &apos;Accept&apos;: &apos;application/json&apos;,             &apos;X-Atlassian-Token&apos;: &apos;no-check&apos;         }     })         .then(response =&gt; {             console.log(                 `Response: ${response.status} ${response.statusText}`             );             return response.text();         })         .then(text =&gt; console.log(text))         .catch(err =&gt; console.error(err));#### Java ####    // This code sample uses the  &apos;Unirest&apos; library:     // http://unirest.io/java.html     HttpResponse response = Unirest.post(&quot;https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments&quot;)             .basicAuth(&quot;email@example.com&quot;, &quot;&quot;)             .header(&quot;Accept&quot;, &quot;application/json&quot;)             .header(&quot;X-Atlassian-Token&quot;, &quot;no-check&quot;)             .field(&quot;file&quot;, new File(&quot;myfile.txt&quot;))             .asJson();                 System.out.println(response.getBody());#### Python ####    # This code sample uses the &apos;requests&apos; library:     # http://docs.python-requests.org     import requests     from requests.auth import HTTPBasicAuth     import json         url = &quot;https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments&quot;         auth = HTTPBasicAuth(&quot;email@example.com&quot;, &quot;&quot;)         headers = {        &quot;Accept&quot;: &quot;application/json&quot;,        &quot;X-Atlassian-Token&quot;: &quot;no-check&quot;     }         response = requests.request(        &quot;POST&quot;,        url,        headers = headers,        auth = auth,        files = {             &quot;file&quot;: (&quot;myfile.txt&quot;, open(&quot;myfile.txt&quot;,&quot;rb&quot;), &quot;application-type&quot;)        }     )         print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(&quot;,&quot;, &quot;: &quot;)))#### PHP ####    // This code sample uses the &apos;Unirest&apos; library:     // http://unirest.io/php.html     Unirest\Request::auth(&apos;email@example.com&apos;, &apos;&apos;);         $headers = array(       &apos;Accept&apos; =&gt; &apos;application/json&apos;,       &apos;X-Atlassian-Token&apos; =&gt; &apos;no-check&apos;     );         $parameters = array(       &apos;file&apos; =&gt; File::add(&apos;myfile.txt&apos;)     );         $response = Unirest\Request::post(       &apos;https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments&apos;,       $headers,       $parameters     );         var_dump($response)#### Forge ####    // This sample uses Atlassian Forge and the `form-data` library.     // https://developer.atlassian.com/platform/forge/     // https://www.npmjs.com/package/form-data     import api from &quot;@forge/api&quot;;     import FormData from &quot;form-data&quot;;         const form = new FormData();     form.append(&apos;file&apos;, fileStream, {knownLength: fileSizeInBytes});         const response = await api.asApp().requestJira(&apos;/rest/api/2/issue/{issueIdOrKey}/attachments&apos;, {         method: &apos;POST&apos;,         body: form,         headers: {             &apos;Accept&apos;: &apos;application/json&apos;,             &apos;X-Atlassian-Token&apos;: &apos;no-check&apos;         }     });         console.log(`Response: ${response.status} ${response.statusText}`);     console.log(await response.json());Tip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.This operation can be accessed anonymously.**[Permissions](#permissions) required:**  *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<AtlassianClient.Models.Attachment>?> PostAsync(MultipartBody body, Action<AttachmentsRequestBuilderPostRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<List<AtlassianClient.Models.Attachment>> PostAsync(MultipartBody body, Action<AttachmentsRequestBuilderPostRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<AtlassianClient.Models.Attachment>(requestInfo, AtlassianClient.Models.Attachment.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.ToList();
        }
        /// <summary>
        /// Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).Note that: *  The request must have a `X-Atlassian-Token: no-check` header, if not it is blocked. See [Special headers](#special-request-headers) for more information. *  The name of the multipart/form-data parameter that contains the attachments must be `file`.The following examples upload a file called *myfile.txt* to the issue *TEST-123*:#### curl ####    curl --location --request POST &apos;https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments&apos;     -u &apos;email@example.com:&lt;api_token&gt;&apos;     -H &apos;X-Atlassian-Token: no-check&apos;     --form &apos;file=@&quot;myfile.txt&quot;&apos;#### Node.js ####    // This code sample uses the &apos;node-fetch&apos; and &apos;form-data&apos; libraries:     // https://www.npmjs.com/package/node-fetch     // https://www.npmjs.com/package/form-data     const fetch = require(&apos;node-fetch&apos;);     const FormData = require(&apos;form-data&apos;);     const fs = require(&apos;fs&apos;);         const filePath = &apos;myfile.txt&apos;;     const form = new FormData();     const stats = fs.statSync(filePath);     const fileSizeInBytes = stats.size;     const fileStream = fs.createReadStream(filePath);         form.append(&apos;file&apos;, fileStream, {knownLength: fileSizeInBytes});         fetch(&apos;https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments&apos;, {         method: &apos;POST&apos;,         body: form,         headers: {             &apos;Authorization&apos;: `Basic ${Buffer.from(                 &apos;email@example.com:&apos;             ).toString(&apos;base64&apos;)}`,             &apos;Accept&apos;: &apos;application/json&apos;,             &apos;X-Atlassian-Token&apos;: &apos;no-check&apos;         }     })         .then(response =&gt; {             console.log(                 `Response: ${response.status} ${response.statusText}`             );             return response.text();         })         .then(text =&gt; console.log(text))         .catch(err =&gt; console.error(err));#### Java ####    // This code sample uses the  &apos;Unirest&apos; library:     // http://unirest.io/java.html     HttpResponse response = Unirest.post(&quot;https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments&quot;)             .basicAuth(&quot;email@example.com&quot;, &quot;&quot;)             .header(&quot;Accept&quot;, &quot;application/json&quot;)             .header(&quot;X-Atlassian-Token&quot;, &quot;no-check&quot;)             .field(&quot;file&quot;, new File(&quot;myfile.txt&quot;))             .asJson();                 System.out.println(response.getBody());#### Python ####    # This code sample uses the &apos;requests&apos; library:     # http://docs.python-requests.org     import requests     from requests.auth import HTTPBasicAuth     import json         url = &quot;https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments&quot;         auth = HTTPBasicAuth(&quot;email@example.com&quot;, &quot;&quot;)         headers = {        &quot;Accept&quot;: &quot;application/json&quot;,        &quot;X-Atlassian-Token&quot;: &quot;no-check&quot;     }         response = requests.request(        &quot;POST&quot;,        url,        headers = headers,        auth = auth,        files = {             &quot;file&quot;: (&quot;myfile.txt&quot;, open(&quot;myfile.txt&quot;,&quot;rb&quot;), &quot;application-type&quot;)        }     )         print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(&quot;,&quot;, &quot;: &quot;)))#### PHP ####    // This code sample uses the &apos;Unirest&apos; library:     // http://unirest.io/php.html     Unirest\Request::auth(&apos;email@example.com&apos;, &apos;&apos;);         $headers = array(       &apos;Accept&apos; =&gt; &apos;application/json&apos;,       &apos;X-Atlassian-Token&apos; =&gt; &apos;no-check&apos;     );         $parameters = array(       &apos;file&apos; =&gt; File::add(&apos;myfile.txt&apos;)     );         $response = Unirest\Request::post(       &apos;https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments&apos;,       $headers,       $parameters     );         var_dump($response)#### Forge ####    // This sample uses Atlassian Forge and the `form-data` library.     // https://developer.atlassian.com/platform/forge/     // https://www.npmjs.com/package/form-data     import api from &quot;@forge/api&quot;;     import FormData from &quot;form-data&quot;;         const form = new FormData();     form.append(&apos;file&apos;, fileStream, {knownLength: fileSizeInBytes});         const response = await api.asApp().requestJira(&apos;/rest/api/2/issue/{issueIdOrKey}/attachments&apos;, {         method: &apos;POST&apos;,         body: form,         headers: {             &apos;Accept&apos;: &apos;application/json&apos;,             &apos;X-Atlassian-Token&apos;: &apos;no-check&apos;         }     });         console.log(`Response: ${response.status} ${response.statusText}`);     console.log(await response.json());Tip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.This operation can be accessed anonymously.**[Permissions](#permissions) required:**  *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in. *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(MultipartBody body, Action<AttachmentsRequestBuilderPostRequestConfiguration>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(MultipartBody body, Action<AttachmentsRequestBuilderPostRequestConfiguration> requestConfiguration = default) {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation {
                HttpMethod = Method.POST,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            requestInfo.Headers.Add("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "multipart/form-data", body);
            if (requestConfiguration != null) {
                var requestConfig = new AttachmentsRequestBuilderPostRequestConfiguration();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public AttachmentsRequestBuilder WithUrl(string rawUrl) {
            return new AttachmentsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class AttachmentsRequestBuilderPostRequestConfiguration {
            /// <summary>Request headers</summary>
            public RequestHeaders Headers { get; set; }
            /// <summary>Request options</summary>
            public IList<IRequestOption> Options { get; set; }
            /// <summary>
            /// Instantiates a new attachmentsRequestBuilderPostRequestConfiguration and sets the default values.
            /// </summary>
            public AttachmentsRequestBuilderPostRequestConfiguration() {
                Options = new List<IRequestOption>();
                Headers = new RequestHeaders();
            }
        }
    }
}
