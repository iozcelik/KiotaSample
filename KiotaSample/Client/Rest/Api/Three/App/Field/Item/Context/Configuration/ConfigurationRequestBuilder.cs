// <auto-generated/>
using AtlassianClient.Models;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace AtlassianClient.Rest.Api.Three.App.Field.Item.Context.Configuration {
    /// <summary>
    /// Builds and executes requests for operations under \rest\api\3\app\field\{fieldIdOrKey}\context\configuration
    /// </summary>
    public class ConfigurationRequestBuilder : BaseRequestBuilder {
        /// <summary>
        /// Instantiates a new ConfigurationRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ConfigurationRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/api/3/app/field/{fieldIdOrKey}/context/configuration{?id*,fieldContextId*,issueId*,projectKeyOrId*,issueTypeId*,startAt*,maxResults*}", pathParameters) {
        }
        /// <summary>
        /// Instantiates a new ConfigurationRequestBuilder and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ConfigurationRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/rest/api/3/app/field/{fieldIdOrKey}/context/configuration{?id*,fieldContextId*,issueId*,projectKeyOrId*,issueTypeId*,startAt*,maxResults*}", rawUrl) {
        }
        /// <summary>
        /// Returns a [paginated](#pagination) list of configurations for a custom field created by a [Forge app](https://developer.atlassian.com/platform/forge/).The result can be filtered by one of these criteria: *  `id`. *  `fieldContextId`. *  `issueId`. *  `projectKeyOrId` and `issueTypeId`.Otherwise, all configurations are returned.**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<PageBeanContextualConfiguration?> GetAsync(Action<ConfigurationRequestBuilderGetRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<PageBeanContextualConfiguration> GetAsync(Action<ConfigurationRequestBuilderGetRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<PageBeanContextualConfiguration>(requestInfo, PageBeanContextualConfiguration.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns a [paginated](#pagination) list of configurations for a custom field created by a [Forge app](https://developer.atlassian.com/platform/forge/).The result can be filtered by one of these criteria: *  `id`. *  `fieldContextId`. *  `issueId`. *  `projectKeyOrId` and `issueTypeId`.Otherwise, all configurations are returned.**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field.
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<ConfigurationRequestBuilderGetRequestConfiguration>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<ConfigurationRequestBuilderGetRequestConfiguration> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation {
                HttpMethod = Method.GET,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            requestInfo.Headers.Add("Accept", "application/json");
            if (requestConfiguration != null) {
                var requestConfig = new ConfigurationRequestBuilderGetRequestConfiguration();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddQueryParameters(requestConfig.QueryParameters);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public ConfigurationRequestBuilder WithUrl(string rawUrl) {
            return new ConfigurationRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns a [paginated](#pagination) list of configurations for a custom field created by a [Forge app](https://developer.atlassian.com/platform/forge/).The result can be filtered by one of these criteria: *  `id`. *  `fieldContextId`. *  `issueId`. *  `projectKeyOrId` and `issueTypeId`.Otherwise, all configurations are returned.**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field.
        /// </summary>
        public class ConfigurationRequestBuilderGetQueryParameters {
            /// <summary>The list of field context IDs. To include multiple field contexts, separate IDs with an ampersand: `fieldContextId=10000&amp;fieldContextId=10001`. Can&apos;t be provided with `id`, `issueId`, `projectKeyOrId`, or `issueTypeId`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("fieldContextId")]
            public long?[]? FieldContextId { get; set; }
#nullable restore
#else
            [QueryParameter("fieldContextId")]
            public long?[] FieldContextId { get; set; }
#endif
            /// <summary>The list of configuration IDs. To include multiple configurations, separate IDs with an ampersand: `id=10000&amp;id=10001`. Can&apos;t be provided with `fieldContextId`, `issueId`, `projectKeyOrId`, or `issueTypeId`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("id")]
            public long?[]? Id { get; set; }
#nullable restore
#else
            [QueryParameter("id")]
            public long?[] Id { get; set; }
#endif
            /// <summary>The ID of the issue to filter results by. If the issue doesn&apos;t exist, an empty list is returned. Can&apos;t be provided with `projectKeyOrId`, or `issueTypeId`.</summary>
            [QueryParameter("issueId")]
            public long? IssueId { get; set; }
            /// <summary>The ID of the issue type to filter results by. Must be provided with `projectKeyOrId`. Can&apos;t be provided with `issueId`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("issueTypeId")]
            public string? IssueTypeId { get; set; }
#nullable restore
#else
            [QueryParameter("issueTypeId")]
            public string IssueTypeId { get; set; }
#endif
            /// <summary>The maximum number of items to return per page.</summary>
            [QueryParameter("maxResults")]
            public int? MaxResults { get; set; }
            /// <summary>The ID or key of the project to filter results by. Must be provided with `issueTypeId`. Can&apos;t be provided with `issueId`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("projectKeyOrId")]
            public string? ProjectKeyOrId { get; set; }
#nullable restore
#else
            [QueryParameter("projectKeyOrId")]
            public string ProjectKeyOrId { get; set; }
#endif
            /// <summary>The index of the first item to return in a page of results (page offset).</summary>
            [QueryParameter("startAt")]
            public long? StartAt { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class ConfigurationRequestBuilderGetRequestConfiguration {
            /// <summary>Request headers</summary>
            public RequestHeaders Headers { get; set; }
            /// <summary>Request options</summary>
            public IList<IRequestOption> Options { get; set; }
            /// <summary>Request query parameters</summary>
            public ConfigurationRequestBuilderGetQueryParameters QueryParameters { get; set; } = new ConfigurationRequestBuilderGetQueryParameters();
            /// <summary>
            /// Instantiates a new configurationRequestBuilderGetRequestConfiguration and sets the default values.
            /// </summary>
            public ConfigurationRequestBuilderGetRequestConfiguration() {
                Options = new List<IRequestOption>();
                Headers = new RequestHeaders();
            }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class ConfigurationRequestBuilderPutRequestConfiguration {
        }
    }
}
