// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details about a notification.
    /// </summary>
    public class Notification : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The HTML body of the email notification for the issue.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? HtmlBody { get; set; }
#nullable restore
#else
        public string HtmlBody { get; set; }
#endif
        /// <summary>Restricts the notifications to users with the specified permissions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public NotificationRecipientsRestrictions? Restrict { get; set; }
#nullable restore
#else
        public NotificationRecipientsRestrictions Restrict { get; set; }
#endif
        /// <summary>The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subject { get; set; }
#nullable restore
#else
        public string Subject { get; set; }
#endif
        /// <summary>The plain text body of the email notification for the issue.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TextBody { get; set; }
#nullable restore
#else
        public string TextBody { get; set; }
#endif
        /// <summary>The recipients of the email notification for the issue.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public NotificationRecipients? To { get; set; }
#nullable restore
#else
        public NotificationRecipients To { get; set; }
#endif
        /// <summary>
        /// Instantiates a new Notification and sets the default values.
        /// </summary>
        public Notification() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Notification CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Notification();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"htmlBody", n => { HtmlBody = n.GetStringValue(); } },
                {"restrict", n => { Restrict = n.GetObjectValue<NotificationRecipientsRestrictions>(NotificationRecipientsRestrictions.CreateFromDiscriminatorValue); } },
                {"subject", n => { Subject = n.GetStringValue(); } },
                {"textBody", n => { TextBody = n.GetStringValue(); } },
                {"to", n => { To = n.GetObjectValue<NotificationRecipients>(NotificationRecipients.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("htmlBody", HtmlBody);
            writer.WriteObjectValue<NotificationRecipientsRestrictions>("restrict", Restrict);
            writer.WriteStringValue("subject", Subject);
            writer.WriteStringValue("textBody", TextBody);
            writer.WriteObjectValue<NotificationRecipients>("to", To);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
