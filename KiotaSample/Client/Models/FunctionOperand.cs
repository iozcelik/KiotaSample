// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// An operand that is a function. See [Advanced searching - functions reference](https://confluence.atlassian.com/x/dwiiLQ) for more information about JQL functions.
    /// </summary>
    public class FunctionOperand : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The list of function arguments.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Arguments { get; set; }
#nullable restore
#else
        public List<string> Arguments { get; set; }
#endif
        /// <summary>Encoded operand, which can be used directly in a JQL query.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EncodedOperand { get; set; }
#nullable restore
#else
        public string EncodedOperand { get; set; }
#endif
        /// <summary>The name of the function.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Function { get; set; }
#nullable restore
#else
        public string Function { get; set; }
#endif
        /// <summary>
        /// Instantiates a new FunctionOperand and sets the default values.
        /// </summary>
        public FunctionOperand() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static FunctionOperand CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new FunctionOperand();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"arguments", n => { Arguments = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"encodedOperand", n => { EncodedOperand = n.GetStringValue(); } },
                {"function", n => { Function = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("arguments", Arguments);
            writer.WriteStringValue("encodedOperand", EncodedOperand);
            writer.WriteStringValue("function", Function);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
