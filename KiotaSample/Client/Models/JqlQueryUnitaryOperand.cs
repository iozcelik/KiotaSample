// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Composed type wrapper for classes FunctionOperand, KeywordOperand, ValueOperand
    /// </summary>
    public class JqlQueryUnitaryOperand : IComposedTypeWrapper, IParsable {
        /// <summary>Composed type representation for type FunctionOperand</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.FunctionOperand? FunctionOperand { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.FunctionOperand FunctionOperand { get; set; }
#endif
        /// <summary>Composed type representation for type KeywordOperand</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.KeywordOperand? KeywordOperand { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.KeywordOperand KeywordOperand { get; set; }
#endif
        /// <summary>Composed type representation for type ValueOperand</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.ValueOperand? ValueOperand { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.ValueOperand ValueOperand { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JqlQueryUnitaryOperand CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var result = new JqlQueryUnitaryOperand();
            result.FunctionOperand = new AtlassianClient.Models.FunctionOperand();
            result.KeywordOperand = new AtlassianClient.Models.KeywordOperand();
            result.ValueOperand = new AtlassianClient.Models.ValueOperand();
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            if(FunctionOperand != null || KeywordOperand != null || ValueOperand != null) {
                return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(FunctionOperand, KeywordOperand, ValueOperand);
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<AtlassianClient.Models.FunctionOperand>(null, FunctionOperand, KeywordOperand, ValueOperand);
        }
    }
}
