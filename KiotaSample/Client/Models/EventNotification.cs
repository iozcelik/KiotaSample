// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details about a notification associated with an event.
    /// </summary>
    public class EventNotification : IParsable {
        /// <summary>The email address.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EmailAddress { get; set; }
#nullable restore
#else
        public string EmailAddress { get; set; }
#endif
        /// <summary>Expand options that include additional event notification details in the response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Expand { get; set; }
#nullable restore
#else
        public string Expand { get; set; }
#endif
        /// <summary>The custom user or group field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public FieldDetails? Field { get; set; }
#nullable restore
#else
        public FieldDetails Field { get; set; }
#endif
        /// <summary>The specified group.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public GroupName? Group { get; set; }
#nullable restore
#else
        public GroupName Group { get; set; }
#endif
        /// <summary>The ID of the notification.</summary>
        public long? Id { get; set; }
        /// <summary>Identifies the recipients of the notification.</summary>
        public EventNotification_notificationType? NotificationType { get; set; }
        /// <summary>As a group&apos;s name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn&apos;t implied by `notificationType` value. So, when `notificationType` is: *  `User` The `parameter` is the user account ID. *  `Group` The `parameter` is the group name. *  `ProjectRole` The `parameter` is the project role ID. *  `UserCustomField` The `parameter` is the ID of the custom field. *  `GroupCustomField` The `parameter` is the ID of the custom field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Parameter { get; set; }
#nullable restore
#else
        public string Parameter { get; set; }
#endif
        /// <summary>The specified project role.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.ProjectRole? ProjectRole { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.ProjectRole ProjectRole { get; set; }
#endif
        /// <summary>The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn&apos;t implied by the `notificationType` value. So, when `notificationType` is: *  `User`, `recipient` is the user account ID. *  `Group`, `recipient` is the group ID. *  `ProjectRole`, `recipient` is the project role ID. *  `UserCustomField`, `recipient` is the ID of the custom field. *  `GroupCustomField`, `recipient` is the ID of the custom field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Recipient { get; set; }
#nullable restore
#else
        public string Recipient { get; set; }
#endif
        /// <summary>The specified user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UserDetails? User { get; set; }
#nullable restore
#else
        public UserDetails User { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static EventNotification CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new EventNotification();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"emailAddress", n => { EmailAddress = n.GetStringValue(); } },
                {"expand", n => { Expand = n.GetStringValue(); } },
                {"field", n => { Field = n.GetObjectValue<FieldDetails>(FieldDetails.CreateFromDiscriminatorValue); } },
                {"group", n => { Group = n.GetObjectValue<GroupName>(GroupName.CreateFromDiscriminatorValue); } },
                {"id", n => { Id = n.GetLongValue(); } },
                {"notificationType", n => { NotificationType = n.GetEnumValue<EventNotification_notificationType>(); } },
                {"parameter", n => { Parameter = n.GetStringValue(); } },
                {"projectRole", n => { ProjectRole = n.GetObjectValue<AtlassianClient.Models.ProjectRole>(AtlassianClient.Models.ProjectRole.CreateFromDiscriminatorValue); } },
                {"recipient", n => { Recipient = n.GetStringValue(); } },
                {"user", n => { User = n.GetObjectValue<UserDetails>(UserDetails.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("emailAddress", EmailAddress);
            writer.WriteStringValue("expand", Expand);
            writer.WriteObjectValue<FieldDetails>("field", Field);
            writer.WriteObjectValue<GroupName>("group", Group);
            writer.WriteLongValue("id", Id);
            writer.WriteEnumValue<EventNotification_notificationType>("notificationType", NotificationType);
            writer.WriteStringValue("parameter", Parameter);
            writer.WriteObjectValue<AtlassianClient.Models.ProjectRole>("projectRole", ProjectRole);
            writer.WriteStringValue("recipient", Recipient);
            writer.WriteObjectValue<UserDetails>("user", User);
        }
    }
}
