// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    public class IssueFieldOptionScopeBean : IParsable {
        /// <summary>Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option is available in all projects.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public GlobalScopeBean? Global { get; set; }
#nullable restore
#else
        public GlobalScopeBean Global { get; set; }
#endif
        /// <summary>DEPRECATED</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<long?>? Projects { get; set; }
#nullable restore
#else
        public List<long?> Projects { get; set; }
#endif
        /// <summary>Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ProjectScopeBean>? Projects2 { get; set; }
#nullable restore
#else
        public List<ProjectScopeBean> Projects2 { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static IssueFieldOptionScopeBean CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new IssueFieldOptionScopeBean();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"global", n => { Global = n.GetObjectValue<GlobalScopeBean>(GlobalScopeBean.CreateFromDiscriminatorValue); } },
                {"projects", n => { Projects = n.GetCollectionOfPrimitiveValues<long?>()?.ToList(); } },
                {"projects2", n => { Projects2 = n.GetCollectionOfObjectValues<ProjectScopeBean>(ProjectScopeBean.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<GlobalScopeBean>("global", Global);
            writer.WriteCollectionOfPrimitiveValues<long?>("projects", Projects);
            writer.WriteCollectionOfObjectValues<ProjectScopeBean>("projects2", Projects2);
        }
    }
}
