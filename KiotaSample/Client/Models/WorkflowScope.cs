// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// The scope of the workflow.
    /// </summary>
    public class WorkflowScope : IParsable {
        /// <summary>Project ID details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ProjectId? Project { get; set; }
#nullable restore
#else
        public ProjectId Project { get; set; }
#endif
        /// <summary>The scope of the workflow. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.</summary>
        public WorkflowScope_type? Type { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WorkflowScope CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WorkflowScope();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"project", n => { Project = n.GetObjectValue<ProjectId>(ProjectId.CreateFromDiscriminatorValue); } },
                {"type", n => { Type = n.GetEnumValue<WorkflowScope_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<ProjectId>("project", Project);
            writer.WriteEnumValue<WorkflowScope_type>("type", Type);
        }
    }
}
