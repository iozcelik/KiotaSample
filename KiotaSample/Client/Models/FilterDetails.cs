// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of a filter.
    /// </summary>
    public class FilterDetails : IParsable {
        /// <summary>The description of the filter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The groups and projects that can edit the filter. This can be specified when updating a filter, but not when creating a filter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<SharePermission>? EditPermissions { get; set; }
#nullable restore
#else
        public List<SharePermission> EditPermissions { get; set; }
#endif
        /// <summary>Expand options that include additional filter details in the response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Expand { get; private set; }
#nullable restore
#else
        public string Expand { get; private set; }
#endif
        /// <summary>Whether the filter is selected as a favorite by any users, not including the filter owner.</summary>
        public bool? Favourite { get; private set; }
        /// <summary>The count of how many users have selected this filter as a favorite, including the filter owner.</summary>
        public long? FavouritedCount { get; private set; }
        /// <summary>The unique identifier for the filter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; private set; }
#nullable restore
#else
        public string Id { get; private set; }
#endif
        /// <summary>The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Jql { get; private set; }
#nullable restore
#else
        public string Jql { get; private set; }
#endif
        /// <summary>The name of the filter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The user who owns the filter. Defaults to the creator of the filter, however, Jira administrators can change the owner of a shared filter in the admin settings.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public User? Owner { get; private set; }
#nullable restore
#else
        public User Owner { get; private set; }
#endif
        /// <summary>A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter&apos;s JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SearchUrl { get; private set; }
#nullable restore
#else
        public string SearchUrl { get; private set; }
#endif
        /// <summary>The URL of the filter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Self { get; private set; }
#nullable restore
#else
        public string Self { get; private set; }
#endif
        /// <summary>The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<SharePermission>? SharePermissions { get; set; }
#nullable restore
#else
        public List<SharePermission> SharePermissions { get; set; }
#endif
        /// <summary>The users that are subscribed to the filter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<FilterSubscription>? Subscriptions { get; private set; }
#nullable restore
#else
        public List<FilterSubscription> Subscriptions { get; private set; }
#endif
        /// <summary>A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ViewUrl { get; private set; }
#nullable restore
#else
        public string ViewUrl { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static FilterDetails CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new FilterDetails();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"description", n => { Description = n.GetStringValue(); } },
                {"editPermissions", n => { EditPermissions = n.GetCollectionOfObjectValues<SharePermission>(SharePermission.CreateFromDiscriminatorValue)?.ToList(); } },
                {"expand", n => { Expand = n.GetStringValue(); } },
                {"favourite", n => { Favourite = n.GetBoolValue(); } },
                {"favouritedCount", n => { FavouritedCount = n.GetLongValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"jql", n => { Jql = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"owner", n => { Owner = n.GetObjectValue<User>(User.CreateFromDiscriminatorValue); } },
                {"searchUrl", n => { SearchUrl = n.GetStringValue(); } },
                {"self", n => { Self = n.GetStringValue(); } },
                {"sharePermissions", n => { SharePermissions = n.GetCollectionOfObjectValues<SharePermission>(SharePermission.CreateFromDiscriminatorValue)?.ToList(); } },
                {"subscriptions", n => { Subscriptions = n.GetCollectionOfObjectValues<FilterSubscription>(FilterSubscription.CreateFromDiscriminatorValue)?.ToList(); } },
                {"viewUrl", n => { ViewUrl = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfObjectValues<SharePermission>("editPermissions", EditPermissions);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfObjectValues<SharePermission>("sharePermissions", SharePermissions);
        }
    }
}
