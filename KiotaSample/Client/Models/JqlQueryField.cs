// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// A field used in a JQL query. See [Advanced searching - fields reference](https://confluence.atlassian.com/x/dAiiLQ) for more information about fields in JQL queries.
    /// </summary>
    public class JqlQueryField : IParsable {
        /// <summary>The encoded name of the field, which can be used directly in a JQL query.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EncodedName { get; set; }
#nullable restore
#else
        public string EncodedName { get; set; }
#endif
        /// <summary>The name of the field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>When the field refers to a value in an entity property, details of the entity property value.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<JqlQueryFieldEntityProperty>? Property { get; set; }
#nullable restore
#else
        public List<JqlQueryFieldEntityProperty> Property { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JqlQueryField CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JqlQueryField();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"encodedName", n => { EncodedName = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"property", n => { Property = n.GetCollectionOfObjectValues<JqlQueryFieldEntityProperty>(JqlQueryFieldEntityProperty.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("encodedName", EncodedName);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfObjectValues<JqlQueryFieldEntityProperty>("property", Property);
        }
    }
}
