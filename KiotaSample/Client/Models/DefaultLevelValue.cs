// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of scheme and new default level.
    /// </summary>
    public class DefaultLevelValue : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ID of the issue security level to set as default for the specified scheme. Providing null will reset the default level.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultLevelId { get; set; }
#nullable restore
#else
        public string DefaultLevelId { get; set; }
#endif
        /// <summary>The ID of the issue security scheme to set default level for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IssueSecuritySchemeId { get; set; }
#nullable restore
#else
        public string IssueSecuritySchemeId { get; set; }
#endif
        /// <summary>
        /// Instantiates a new DefaultLevelValue and sets the default values.
        /// </summary>
        public DefaultLevelValue() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static DefaultLevelValue CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new DefaultLevelValue();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"defaultLevelId", n => { DefaultLevelId = n.GetStringValue(); } },
                {"issueSecuritySchemeId", n => { IssueSecuritySchemeId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("defaultLevelId", DefaultLevelId);
            writer.WriteStringValue("issueSecuritySchemeId", IssueSecuritySchemeId);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
