// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of a field.
    /// </summary>
    public class Field : IParsable {
        /// <summary>Number of contexts where the field is used.</summary>
        public long? ContextsCount { get; set; }
        /// <summary>The description of the field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The ID of the field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Whether the field is locked.</summary>
        public bool? IsLocked { get; set; }
        /// <summary>Whether the field is shown on screen or not.</summary>
        public bool? IsUnscreenable { get; set; }
        /// <summary>The key of the field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; set; }
#nullable restore
#else
        public string Key { get; set; }
#endif
        /// <summary>Information about the most recent use of a field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public FieldLastUsed? LastUsed { get; set; }
#nullable restore
#else
        public FieldLastUsed LastUsed { get; set; }
#endif
        /// <summary>The name of the field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Number of projects where the field is used.</summary>
        public long? ProjectsCount { get; set; }
        /// <summary>The schema of a field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JsonTypeBean? Schema { get; set; }
#nullable restore
#else
        public JsonTypeBean Schema { get; set; }
#endif
        /// <summary>Number of screens where the field is used.</summary>
        public long? ScreensCount { get; set; }
        /// <summary>The searcher key of the field. Returned for custom fields.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SearcherKey { get; set; }
#nullable restore
#else
        public string SearcherKey { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Field CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Field();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"contextsCount", n => { ContextsCount = n.GetLongValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"isLocked", n => { IsLocked = n.GetBoolValue(); } },
                {"isUnscreenable", n => { IsUnscreenable = n.GetBoolValue(); } },
                {"key", n => { Key = n.GetStringValue(); } },
                {"lastUsed", n => { LastUsed = n.GetObjectValue<FieldLastUsed>(FieldLastUsed.CreateFromDiscriminatorValue); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"projectsCount", n => { ProjectsCount = n.GetLongValue(); } },
                {"schema", n => { Schema = n.GetObjectValue<JsonTypeBean>(JsonTypeBean.CreateFromDiscriminatorValue); } },
                {"screensCount", n => { ScreensCount = n.GetLongValue(); } },
                {"searcherKey", n => { SearcherKey = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("contextsCount", ContextsCount);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("isLocked", IsLocked);
            writer.WriteBoolValue("isUnscreenable", IsUnscreenable);
            writer.WriteStringValue("key", Key);
            writer.WriteObjectValue<FieldLastUsed>("lastUsed", LastUsed);
            writer.WriteStringValue("name", Name);
            writer.WriteLongValue("projectsCount", ProjectsCount);
            writer.WriteObjectValue<JsonTypeBean>("schema", Schema);
            writer.WriteLongValue("screensCount", ScreensCount);
            writer.WriteStringValue("searcherKey", SearcherKey);
        }
    }
}
