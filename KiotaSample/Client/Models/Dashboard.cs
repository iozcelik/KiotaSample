// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of a dashboard.
    /// </summary>
    public class Dashboard : IParsable {
        /// <summary>The automatic refresh interval for the dashboard in milliseconds.</summary>
        public int? AutomaticRefreshMs { get; private set; }
        /// <summary>The description property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The details of any edit share permissions for the dashboard.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<SharePermission>? EditPermissions { get; private set; }
#nullable restore
#else
        public List<SharePermission> EditPermissions { get; private set; }
#endif
        /// <summary>The ID of the dashboard.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; private set; }
#nullable restore
#else
        public string Id { get; private set; }
#endif
        /// <summary>Whether the dashboard is selected as a favorite by the user.</summary>
        public bool? IsFavourite { get; private set; }
        /// <summary>Whether the current user has permission to edit the dashboard.</summary>
        public bool? IsWritable { get; private set; }
        /// <summary>The name of the dashboard.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; private set; }
#nullable restore
#else
        public string Name { get; private set; }
#endif
        /// <summary>The owner of the dashboard.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UserBean? Owner { get; private set; }
#nullable restore
#else
        public UserBean Owner { get; private set; }
#endif
        /// <summary>The number of users who have this dashboard as a favorite.</summary>
        public long? Popularity { get; private set; }
        /// <summary>The rank of this dashboard.</summary>
        public int? Rank { get; private set; }
        /// <summary>The URL of these dashboard details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Self { get; private set; }
#nullable restore
#else
        public string Self { get; private set; }
#endif
        /// <summary>The details of any view share permissions for the dashboard.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<SharePermission>? SharePermissions { get; private set; }
#nullable restore
#else
        public List<SharePermission> SharePermissions { get; private set; }
#endif
        /// <summary>Whether the current dashboard is system dashboard.</summary>
        public bool? SystemDashboard { get; private set; }
        /// <summary>The URL of the dashboard.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? View { get; private set; }
#nullable restore
#else
        public string View { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Dashboard CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Dashboard();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"automaticRefreshMs", n => { AutomaticRefreshMs = n.GetIntValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"editPermissions", n => { EditPermissions = n.GetCollectionOfObjectValues<SharePermission>(SharePermission.CreateFromDiscriminatorValue)?.ToList(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"isFavourite", n => { IsFavourite = n.GetBoolValue(); } },
                {"isWritable", n => { IsWritable = n.GetBoolValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"owner", n => { Owner = n.GetObjectValue<UserBean>(UserBean.CreateFromDiscriminatorValue); } },
                {"popularity", n => { Popularity = n.GetLongValue(); } },
                {"rank", n => { Rank = n.GetIntValue(); } },
                {"self", n => { Self = n.GetStringValue(); } },
                {"sharePermissions", n => { SharePermissions = n.GetCollectionOfObjectValues<SharePermission>(SharePermission.CreateFromDiscriminatorValue)?.ToList(); } },
                {"systemDashboard", n => { SystemDashboard = n.GetBoolValue(); } },
                {"view", n => { View = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("description", Description);
        }
    }
}
