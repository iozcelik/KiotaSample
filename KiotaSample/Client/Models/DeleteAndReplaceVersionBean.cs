// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    public class DeleteAndReplaceVersionBean : IParsable {
        /// <summary>An array of custom field IDs (`customFieldId`) and version IDs (`moveTo`) to update when the fields contain the deleted version.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CustomFieldReplacement>? CustomFieldReplacementList { get; set; }
#nullable restore
#else
        public List<CustomFieldReplacement> CustomFieldReplacementList { get; set; }
#endif
        /// <summary>The ID of the version to update `affectedVersion` to when the field contains the deleted version.</summary>
        public long? MoveAffectedIssuesTo { get; set; }
        /// <summary>The ID of the version to update `fixVersion` to when the field contains the deleted version.</summary>
        public long? MoveFixIssuesTo { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static DeleteAndReplaceVersionBean CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new DeleteAndReplaceVersionBean();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"customFieldReplacementList", n => { CustomFieldReplacementList = n.GetCollectionOfObjectValues<CustomFieldReplacement>(CustomFieldReplacement.CreateFromDiscriminatorValue)?.ToList(); } },
                {"moveAffectedIssuesTo", n => { MoveAffectedIssuesTo = n.GetLongValue(); } },
                {"moveFixIssuesTo", n => { MoveFixIssuesTo = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<CustomFieldReplacement>("customFieldReplacementList", CustomFieldReplacementList);
            writer.WriteLongValue("moveAffectedIssuesTo", MoveAffectedIssuesTo);
            writer.WriteLongValue("moveFixIssuesTo", MoveFixIssuesTo);
        }
    }
}
