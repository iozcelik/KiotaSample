// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details about the project.
    /// </summary>
    public class CreateProjectDetails : IParsable {
        /// <summary>The default assignee when creating issues for this project.</summary>
        public CreateProjectDetails_assigneeType? AssigneeType { get; set; }
        /// <summary>An integer value for the project&apos;s avatar.</summary>
        public long? AvatarId { get; set; }
        /// <summary>The ID of the project&apos;s category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.</summary>
        public long? CategoryId { get; set; }
        /// <summary>A brief description of the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The ID of the field configuration scheme for the project. Use the [Get all field configuration schemes](#api-rest-api-3-fieldconfigurationscheme-get) operation to get a list of field configuration scheme IDs. If you specify the field configuration scheme you cannot specify the project template key.</summary>
        public long? FieldConfigurationScheme { get; set; }
        /// <summary>The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.</summary>
        public long? IssueSecurityScheme { get; set; }
        /// <summary>The ID of the issue type scheme for the project. Use the [Get all issue type schemes](#api-rest-api-3-issuetypescheme-get) operation to get a list of issue type scheme IDs. If you specify the issue type scheme you cannot specify the project template key.</summary>
        public long? IssueTypeScheme { get; set; }
        /// <summary>The ID of the issue type screen scheme for the project. Use the [Get all issue type screen schemes](#api-rest-api-3-issuetypescreenscheme-get) operation to get a list of issue type screen scheme IDs. If you specify the issue type screen scheme you cannot specify the project template key.</summary>
        public long? IssueTypeScreenScheme { get; set; }
        /// <summary>Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; set; }
#nullable restore
#else
        public string Key { get; set; }
#endif
        /// <summary>This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `leadAccountId`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Lead { get; set; }
#nullable restore
#else
        public string Lead { get; set; }
#endif
        /// <summary>The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `lead`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LeadAccountId { get; set; }
#nullable restore
#else
        public string LeadAccountId { get; set; }
#endif
        /// <summary>The name of the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.</summary>
        public long? NotificationScheme { get; set; }
        /// <summary>The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.</summary>
        public long? PermissionScheme { get; set; }
        /// <summary>A predefined configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`.</summary>
        public CreateProjectDetails_projectTemplateKey? ProjectTemplateKey { get; set; }
        /// <summary>The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don&apos;t specify the project template you have to specify the project type.</summary>
        public CreateProjectDetails_projectTypeKey? ProjectTypeKey { get; set; }
        /// <summary>A link to information about this project, such as project documentation</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; set; }
#nullable restore
#else
        public string Url { get; set; }
#endif
        /// <summary>The ID of the workflow scheme for the project. Use the [Get all workflow schemes](#api-rest-api-3-workflowscheme-get) operation to get a list of workflow scheme IDs. If you specify the workflow scheme you cannot specify the project template key.</summary>
        public long? WorkflowScheme { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CreateProjectDetails CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CreateProjectDetails();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"assigneeType", n => { AssigneeType = n.GetEnumValue<CreateProjectDetails_assigneeType>(); } },
                {"avatarId", n => { AvatarId = n.GetLongValue(); } },
                {"categoryId", n => { CategoryId = n.GetLongValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"fieldConfigurationScheme", n => { FieldConfigurationScheme = n.GetLongValue(); } },
                {"issueSecurityScheme", n => { IssueSecurityScheme = n.GetLongValue(); } },
                {"issueTypeScheme", n => { IssueTypeScheme = n.GetLongValue(); } },
                {"issueTypeScreenScheme", n => { IssueTypeScreenScheme = n.GetLongValue(); } },
                {"key", n => { Key = n.GetStringValue(); } },
                {"lead", n => { Lead = n.GetStringValue(); } },
                {"leadAccountId", n => { LeadAccountId = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"notificationScheme", n => { NotificationScheme = n.GetLongValue(); } },
                {"permissionScheme", n => { PermissionScheme = n.GetLongValue(); } },
                {"projectTemplateKey", n => { ProjectTemplateKey = n.GetEnumValue<CreateProjectDetails_projectTemplateKey>(); } },
                {"projectTypeKey", n => { ProjectTypeKey = n.GetEnumValue<CreateProjectDetails_projectTypeKey>(); } },
                {"url", n => { Url = n.GetStringValue(); } },
                {"workflowScheme", n => { WorkflowScheme = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<CreateProjectDetails_assigneeType>("assigneeType", AssigneeType);
            writer.WriteLongValue("avatarId", AvatarId);
            writer.WriteLongValue("categoryId", CategoryId);
            writer.WriteStringValue("description", Description);
            writer.WriteLongValue("fieldConfigurationScheme", FieldConfigurationScheme);
            writer.WriteLongValue("issueSecurityScheme", IssueSecurityScheme);
            writer.WriteLongValue("issueTypeScheme", IssueTypeScheme);
            writer.WriteLongValue("issueTypeScreenScheme", IssueTypeScreenScheme);
            writer.WriteStringValue("key", Key);
            writer.WriteStringValue("lead", Lead);
            writer.WriteStringValue("leadAccountId", LeadAccountId);
            writer.WriteStringValue("name", Name);
            writer.WriteLongValue("notificationScheme", NotificationScheme);
            writer.WriteLongValue("permissionScheme", PermissionScheme);
            writer.WriteEnumValue<CreateProjectDetails_projectTemplateKey>("projectTemplateKey", ProjectTemplateKey);
            writer.WriteEnumValue<CreateProjectDetails_projectTypeKey>("projectTypeKey", ProjectTypeKey);
            writer.WriteStringValue("url", Url);
            writer.WriteLongValue("workflowScheme", WorkflowScheme);
        }
    }
}
