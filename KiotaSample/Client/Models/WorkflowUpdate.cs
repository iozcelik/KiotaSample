// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// The details of the workflows to update.
    /// </summary>
    public class WorkflowUpdate : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The mapping of old to new status ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<StatusMigration>? DefaultStatusMappings { get; set; }
#nullable restore
#else
        public List<StatusMigration> DefaultStatusMappings { get; set; }
#endif
        /// <summary>The new description for this workflow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The ID of this workflow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The starting point for the statuses in the workflow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public WorkflowLayout? StartPointLayout { get; set; }
#nullable restore
#else
        public WorkflowLayout StartPointLayout { get; set; }
#endif
        /// <summary>The statuses associated with this workflow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<StatusLayoutUpdate>? Statuses { get; set; }
#nullable restore
#else
        public List<StatusLayoutUpdate> Statuses { get; set; }
#endif
        /// <summary>The mapping of old to new status ID for a specific project and issue type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<StatusMappingDTO>? StatusMappings { get; set; }
#nullable restore
#else
        public List<StatusMappingDTO> StatusMappings { get; set; }
#endif
        /// <summary>The transitions of this workflow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<TransitionUpdateDTO>? Transitions { get; set; }
#nullable restore
#else
        public List<TransitionUpdateDTO> Transitions { get; set; }
#endif
        /// <summary>The version details of the workflow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DocumentVersion? Version { get; set; }
#nullable restore
#else
        public DocumentVersion Version { get; set; }
#endif
        /// <summary>
        /// Instantiates a new WorkflowUpdate and sets the default values.
        /// </summary>
        public WorkflowUpdate() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WorkflowUpdate CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WorkflowUpdate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"defaultStatusMappings", n => { DefaultStatusMappings = n.GetCollectionOfObjectValues<StatusMigration>(StatusMigration.CreateFromDiscriminatorValue)?.ToList(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"startPointLayout", n => { StartPointLayout = n.GetObjectValue<WorkflowLayout>(WorkflowLayout.CreateFromDiscriminatorValue); } },
                {"statusMappings", n => { StatusMappings = n.GetCollectionOfObjectValues<StatusMappingDTO>(StatusMappingDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"statuses", n => { Statuses = n.GetCollectionOfObjectValues<StatusLayoutUpdate>(StatusLayoutUpdate.CreateFromDiscriminatorValue)?.ToList(); } },
                {"transitions", n => { Transitions = n.GetCollectionOfObjectValues<TransitionUpdateDTO>(TransitionUpdateDTO.CreateFromDiscriminatorValue)?.ToList(); } },
                {"version", n => { Version = n.GetObjectValue<DocumentVersion>(DocumentVersion.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<StatusMigration>("defaultStatusMappings", DefaultStatusMappings);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<WorkflowLayout>("startPointLayout", StartPointLayout);
            writer.WriteCollectionOfObjectValues<StatusLayoutUpdate>("statuses", Statuses);
            writer.WriteCollectionOfObjectValues<StatusMappingDTO>("statusMappings", StatusMappings);
            writer.WriteCollectionOfObjectValues<TransitionUpdateDTO>("transitions", Transitions);
            writer.WriteObjectValue<DocumentVersion>("version", Version);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
