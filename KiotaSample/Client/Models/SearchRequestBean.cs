// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    public class SearchRequestBean : IParsable {
        /// <summary>Use [expand](em&gt;#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are: *  `renderedFields` Returns field values rendered in HTML format. *  `names` Returns the display name of each field. *  `schema` Returns the schema describing a field type. *  `transitions` Returns all possible transitions for the issue. *  `operations` Returns all possible operations for the issue. *  `editmeta` Returns information about how each field can be edited. *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent. *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field&apos;s value, with the highest numbered item representing the most recent version.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expand { get; set; }
#nullable restore
#else
        public List<string> Expand { get; set; }
#endif
        /// <summary>A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include: *  `*all` Returns all fields. *  `*navigable` Returns navigable fields. *  Any issue field, prefixed with a minus to exclude.The default is `*navigable`.Examples: *  `summary,comment` Returns the summary and comments fields only. *  `-description` Returns all navigable (default) fields except description. *  `*all,-comment` Returns all fields except comments.Multiple `fields` parameters can be included in a request.Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Fields { get; set; }
#nullable restore
#else
        public List<string> Fields { get; set; }
#endif
        /// <summary>Reference fields by their key (rather than ID). The default is `false`.</summary>
        public bool? FieldsByKeys { get; set; }
        /// <summary>A [JQL](https://confluence.atlassian.com/x/egORLQ) expression.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Jql { get; set; }
#nullable restore
#else
        public string Jql { get; set; }
#endif
        /// <summary>The maximum number of items to return per page.</summary>
        public int? MaxResults { get; set; }
        /// <summary>A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Properties { get; set; }
#nullable restore
#else
        public List<string> Properties { get; set; }
#endif
        /// <summary>The index of the first item to return in the page of results (page offset). The base index is `0`.</summary>
        public int? StartAt { get; set; }
        /// <summary>Determines how to validate the JQL query and treat the validation results. Supported values: *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings). *  `warn` Returns all errors as warnings. *  `none` No validation is performed. *  `true` *Deprecated* A legacy synonym for `strict`. *  `false` *Deprecated* A legacy synonym for `warn`.The default is `strict`.Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.</summary>
        public SearchRequestBean_validateQuery? ValidateQuery { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SearchRequestBean CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SearchRequestBean();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"expand", n => { Expand = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"fields", n => { Fields = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"fieldsByKeys", n => { FieldsByKeys = n.GetBoolValue(); } },
                {"jql", n => { Jql = n.GetStringValue(); } },
                {"maxResults", n => { MaxResults = n.GetIntValue(); } },
                {"properties", n => { Properties = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"startAt", n => { StartAt = n.GetIntValue(); } },
                {"validateQuery", n => { ValidateQuery = n.GetEnumValue<SearchRequestBean_validateQuery>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("expand", Expand);
            writer.WriteCollectionOfPrimitiveValues<string>("fields", Fields);
            writer.WriteBoolValue("fieldsByKeys", FieldsByKeys);
            writer.WriteStringValue("jql", Jql);
            writer.WriteIntValue("maxResults", MaxResults);
            writer.WriteCollectionOfPrimitiveValues<string>("properties", Properties);
            writer.WriteIntValue("startAt", StartAt);
            writer.WriteEnumValue<SearchRequestBean_validateQuery>("validateQuery", ValidateQuery);
        }
    }
}
