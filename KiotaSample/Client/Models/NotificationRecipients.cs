// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of the users and groups to receive the notification.
    /// </summary>
    public class NotificationRecipients : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Whether the notification should be sent to the issue&apos;s assignees.</summary>
        public bool? Assignee { get; set; }
        /// <summary>List of groupIds to receive the notification.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? GroupIds { get; set; }
#nullable restore
#else
        public List<string> GroupIds { get; set; }
#endif
        /// <summary>List of groups to receive the notification.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<GroupName>? Groups { get; set; }
#nullable restore
#else
        public List<GroupName> Groups { get; set; }
#endif
        /// <summary>Whether the notification should be sent to the issue&apos;s reporter.</summary>
        public bool? Reporter { get; set; }
        /// <summary>List of users to receive the notification.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<UserDetails>? Users { get; set; }
#nullable restore
#else
        public List<UserDetails> Users { get; set; }
#endif
        /// <summary>Whether the notification should be sent to the issue&apos;s voters.</summary>
        public bool? Voters { get; set; }
        /// <summary>Whether the notification should be sent to the issue&apos;s watchers.</summary>
        public bool? Watchers { get; set; }
        /// <summary>
        /// Instantiates a new NotificationRecipients and sets the default values.
        /// </summary>
        public NotificationRecipients() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static NotificationRecipients CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new NotificationRecipients();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"assignee", n => { Assignee = n.GetBoolValue(); } },
                {"groupIds", n => { GroupIds = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"groups", n => { Groups = n.GetCollectionOfObjectValues<GroupName>(GroupName.CreateFromDiscriminatorValue)?.ToList(); } },
                {"reporter", n => { Reporter = n.GetBoolValue(); } },
                {"users", n => { Users = n.GetCollectionOfObjectValues<UserDetails>(UserDetails.CreateFromDiscriminatorValue)?.ToList(); } },
                {"voters", n => { Voters = n.GetBoolValue(); } },
                {"watchers", n => { Watchers = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("assignee", Assignee);
            writer.WriteCollectionOfPrimitiveValues<string>("groupIds", GroupIds);
            writer.WriteCollectionOfObjectValues<GroupName>("groups", Groups);
            writer.WriteBoolValue("reporter", Reporter);
            writer.WriteCollectionOfObjectValues<UserDetails>("users", Users);
            writer.WriteBoolValue("voters", Voters);
            writer.WriteBoolValue("watchers", Watchers);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
