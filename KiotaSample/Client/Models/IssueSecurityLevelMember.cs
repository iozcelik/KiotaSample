// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Issue security level member.
    /// </summary>
    public class IssueSecurityLevelMember : IParsable {
        /// <summary>The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PermissionHolder? Holder { get; set; }
#nullable restore
#else
        public PermissionHolder Holder { get; set; }
#endif
        /// <summary>The ID of the issue security level member.</summary>
        public long? Id { get; set; }
        /// <summary>The ID of the issue security level.</summary>
        public long? IssueSecurityLevelId { get; set; }
        /// <summary>The managed property</summary>
        public bool? Managed { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static IssueSecurityLevelMember CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new IssueSecurityLevelMember();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"holder", n => { Holder = n.GetObjectValue<PermissionHolder>(PermissionHolder.CreateFromDiscriminatorValue); } },
                {"id", n => { Id = n.GetLongValue(); } },
                {"issueSecurityLevelId", n => { IssueSecurityLevelId = n.GetLongValue(); } },
                {"managed", n => { Managed = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<PermissionHolder>("holder", Holder);
            writer.WriteLongValue("id", Id);
            writer.WriteLongValue("issueSecurityLevelId", IssueSecurityLevelId);
            writer.WriteBoolValue("managed", Managed);
        }
    }
}
