// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    public class ActorsMap : IParsable {
        /// <summary>The name of the group to add. This parameter cannot be used with the `groupId` parameter. As a group&apos;s name can change, use of `groupId` is recommended.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Group { get; set; }
#nullable restore
#else
        public List<string> Group { get; set; }
#endif
        /// <summary>The ID of the group to add. This parameter cannot be used with the `group` parameter.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? GroupId { get; set; }
#nullable restore
#else
        public List<string> GroupId { get; set; }
#endif
        /// <summary>The user account ID of the user to add.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? User { get; set; }
#nullable restore
#else
        public List<string> User { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ActorsMap CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ActorsMap();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"group", n => { Group = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"groupId", n => { GroupId = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"user", n => { User = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("group", Group);
            writer.WriteCollectionOfPrimitiveValues<string>("groupId", GroupId);
            writer.WriteCollectionOfPrimitiveValues<string>("user", User);
        }
    }
}
