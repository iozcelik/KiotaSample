// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Composed type wrapper for classes CompoundClause, FieldChangedClause, FieldValueClause, FieldWasClause
    /// </summary>
    public class JqlQueryClause : IComposedTypeWrapper, IParsable {
        /// <summary>Composed type representation for type CompoundClause</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.CompoundClause? CompoundClause { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.CompoundClause CompoundClause { get; set; }
#endif
        /// <summary>Composed type representation for type FieldChangedClause</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.FieldChangedClause? FieldChangedClause { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.FieldChangedClause FieldChangedClause { get; set; }
#endif
        /// <summary>Composed type representation for type FieldValueClause</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.FieldValueClause? FieldValueClause { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.FieldValueClause FieldValueClause { get; set; }
#endif
        /// <summary>Composed type representation for type FieldWasClause</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.FieldWasClause? FieldWasClause { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.FieldWasClause FieldWasClause { get; set; }
#endif
        /// <summary>Composed type representation for type CompoundClause</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.CompoundClause? JqlQueryClauseCompoundClause { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.CompoundClause JqlQueryClauseCompoundClause { get; set; }
#endif
        /// <summary>Composed type representation for type FieldChangedClause</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.FieldChangedClause? JqlQueryClauseFieldChangedClause { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.FieldChangedClause JqlQueryClauseFieldChangedClause { get; set; }
#endif
        /// <summary>Composed type representation for type FieldValueClause</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.FieldValueClause? JqlQueryClauseFieldValueClause { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.FieldValueClause JqlQueryClauseFieldValueClause { get; set; }
#endif
        /// <summary>Composed type representation for type FieldWasClause</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.FieldWasClause? JqlQueryClauseFieldWasClause { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.FieldWasClause JqlQueryClauseFieldWasClause { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JqlQueryClause CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            var result = new JqlQueryClause();
            result.CompoundClause = new AtlassianClient.Models.CompoundClause();
            result.FieldChangedClause = new AtlassianClient.Models.FieldChangedClause();
            result.FieldValueClause = new AtlassianClient.Models.FieldValueClause();
            result.FieldWasClause = new AtlassianClient.Models.FieldWasClause();
            result.JqlQueryClauseCompoundClause = new AtlassianClient.Models.CompoundClause();
            result.JqlQueryClauseFieldChangedClause = new AtlassianClient.Models.FieldChangedClause();
            result.JqlQueryClauseFieldValueClause = new AtlassianClient.Models.FieldValueClause();
            result.JqlQueryClauseFieldWasClause = new AtlassianClient.Models.FieldWasClause();
            return result;
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            if(CompoundClause != null || FieldChangedClause != null || FieldValueClause != null || FieldWasClause != null || JqlQueryClauseCompoundClause != null || JqlQueryClauseFieldChangedClause != null || JqlQueryClauseFieldValueClause != null || JqlQueryClauseFieldWasClause != null) {
                return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(CompoundClause, FieldChangedClause, FieldValueClause, FieldWasClause, JqlQueryClauseCompoundClause, JqlQueryClauseFieldChangedClause, JqlQueryClauseFieldValueClause, JqlQueryClauseFieldWasClause);
            }
            return new Dictionary<string, Action<IParseNode>>();
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<AtlassianClient.Models.CompoundClause>(null, CompoundClause, FieldChangedClause, FieldValueClause, FieldWasClause, JqlQueryClauseCompoundClause, JqlQueryClauseFieldChangedClause, JqlQueryClauseFieldValueClause, JqlQueryClauseFieldWasClause);
        }
    }
}
