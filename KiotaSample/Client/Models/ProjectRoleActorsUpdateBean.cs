// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    public class ProjectRoleActorsUpdateBean : IParsable {
        /// <summary>The actors to add to the project role.Add groups using: *  `atlassian-group-role-actor` and a list of group names. *  `atlassian-group-role-actor-id` and a list of group IDs.As a group&apos;s name can change, use of `atlassian-group-role-actor-id` is recommended. For example, `&quot;atlassian-group-role-actor-id&quot;:[&quot;eef79f81-0b89-4fca-a736-4be531a10869&quot;,&quot;77f6ab39-e755-4570-a6ae-2d7a8df0bcb8&quot;]`.Add users using `atlassian-user-role-actor` and a list of account IDs. For example, `&quot;atlassian-user-role-actor&quot;:[&quot;12345678-9abc-def1-2345-6789abcdef12&quot;, &quot;abcdef12-3456-789a-bcde-f123456789ab&quot;]`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ProjectRoleActorsUpdateBean_categorisedActors? CategorisedActors { get; set; }
#nullable restore
#else
        public ProjectRoleActorsUpdateBean_categorisedActors CategorisedActors { get; set; }
#endif
        /// <summary>The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.</summary>
        public long? Id { get; private set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ProjectRoleActorsUpdateBean CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ProjectRoleActorsUpdateBean();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"categorisedActors", n => { CategorisedActors = n.GetObjectValue<ProjectRoleActorsUpdateBean_categorisedActors>(ProjectRoleActorsUpdateBean_categorisedActors.CreateFromDiscriminatorValue); } },
                {"id", n => { Id = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<ProjectRoleActorsUpdateBean_categorisedActors>("categorisedActors", CategorisedActors);
        }
    }
}
