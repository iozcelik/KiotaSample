// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    public class WorkflowSchemeReadResponse : IParsable {
        /// <summary>Workflow metadata and usage detail.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public WorkflowMetadataRestModel? DefaultWorkflow { get; set; }
#nullable restore
#else
        public WorkflowMetadataRestModel DefaultWorkflow { get; set; }
#endif
        /// <summary>The description of the workflow scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The ID of the workflow scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The name of the workflow scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The IDs of projects using the workflow scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ProjectIdsUsingScheme { get; set; }
#nullable restore
#else
        public List<string> ProjectIdsUsingScheme { get; set; }
#endif
        /// <summary>The scope of the workflow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public WorkflowScope? Scope { get; set; }
#nullable restore
#else
        public WorkflowScope Scope { get; set; }
#endif
        /// <summary>Indicates if there&apos;s an [asynchronous task](#async-operations) for this workflow scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaskId { get; set; }
#nullable restore
#else
        public string TaskId { get; set; }
#endif
        /// <summary>The version details of the workflow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DocumentVersion? Version { get; set; }
#nullable restore
#else
        public DocumentVersion Version { get; set; }
#endif
        /// <summary>Mappings from workflows to issue types.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<WorkflowMetadataAndIssueTypeRestModel>? WorkflowsForIssueTypes { get; set; }
#nullable restore
#else
        public List<WorkflowMetadataAndIssueTypeRestModel> WorkflowsForIssueTypes { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WorkflowSchemeReadResponse CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WorkflowSchemeReadResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"defaultWorkflow", n => { DefaultWorkflow = n.GetObjectValue<WorkflowMetadataRestModel>(WorkflowMetadataRestModel.CreateFromDiscriminatorValue); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"projectIdsUsingScheme", n => { ProjectIdsUsingScheme = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"scope", n => { Scope = n.GetObjectValue<WorkflowScope>(WorkflowScope.CreateFromDiscriminatorValue); } },
                {"taskId", n => { TaskId = n.GetStringValue(); } },
                {"version", n => { Version = n.GetObjectValue<DocumentVersion>(DocumentVersion.CreateFromDiscriminatorValue); } },
                {"workflowsForIssueTypes", n => { WorkflowsForIssueTypes = n.GetCollectionOfObjectValues<WorkflowMetadataAndIssueTypeRestModel>(WorkflowMetadataAndIssueTypeRestModel.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<WorkflowMetadataRestModel>("defaultWorkflow", DefaultWorkflow);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfPrimitiveValues<string>("projectIdsUsingScheme", ProjectIdsUsingScheme);
            writer.WriteObjectValue<WorkflowScope>("scope", Scope);
            writer.WriteStringValue("taskId", TaskId);
            writer.WriteObjectValue<DocumentVersion>("version", Version);
            writer.WriteCollectionOfObjectValues<WorkflowMetadataAndIssueTypeRestModel>("workflowsForIssueTypes", WorkflowsForIssueTypes);
        }
    }
}
