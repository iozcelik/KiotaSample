// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// The schema of a field.
    /// </summary>
    public class JsonTypeBean : IParsable {
        /// <summary>If the field is a custom field, the configuration of the field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JsonTypeBean_configuration? Configuration { get; private set; }
#nullable restore
#else
        public JsonTypeBean_configuration Configuration { get; private set; }
#endif
        /// <summary>If the field is a custom field, the URI of the field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Custom { get; private set; }
#nullable restore
#else
        public string Custom { get; private set; }
#endif
        /// <summary>If the field is a custom field, the custom ID of the field.</summary>
        public long? CustomId { get; private set; }
        /// <summary>When the data type is an array, the name of the field items within the array.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Items { get; private set; }
#nullable restore
#else
        public string Items { get; private set; }
#endif
        /// <summary>If the field is a system field, the name of the field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? System { get; private set; }
#nullable restore
#else
        public string System { get; private set; }
#endif
        /// <summary>The data type of the field.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; private set; }
#nullable restore
#else
        public string Type { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JsonTypeBean CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JsonTypeBean();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"configuration", n => { Configuration = n.GetObjectValue<JsonTypeBean_configuration>(JsonTypeBean_configuration.CreateFromDiscriminatorValue); } },
                {"custom", n => { Custom = n.GetStringValue(); } },
                {"customId", n => { CustomId = n.GetLongValue(); } },
                {"items", n => { Items = n.GetStringValue(); } },
                {"system", n => { System = n.GetStringValue(); } },
                {"type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
        }
    }
}
