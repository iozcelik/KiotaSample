// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of a status.
    /// </summary>
    public class JiraWorkflowStatus : IParsable {
        /// <summary>The description of the status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The ID of the status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The name of the status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The scope of the workflow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public WorkflowScope? Scope { get; set; }
#nullable restore
#else
        public WorkflowScope Scope { get; set; }
#endif
        /// <summary>The category of the status.</summary>
        public JiraWorkflowStatus_statusCategory? StatusCategory { get; set; }
        /// <summary>The reference of the status.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatusReference { get; set; }
#nullable restore
#else
        public string StatusReference { get; set; }
#endif
        /// <summary>The `statuses.usages` expand is an optional parameter that can be used when reading and updating statuses in Jira. It provides additional information about the projects and issue types associated with the requested statuses.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ProjectIssueTypes>? Usages { get; set; }
#nullable restore
#else
        public List<ProjectIssueTypes> Usages { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JiraWorkflowStatus CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JiraWorkflowStatus();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"description", n => { Description = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"scope", n => { Scope = n.GetObjectValue<WorkflowScope>(WorkflowScope.CreateFromDiscriminatorValue); } },
                {"statusCategory", n => { StatusCategory = n.GetEnumValue<JiraWorkflowStatus_statusCategory>(); } },
                {"statusReference", n => { StatusReference = n.GetStringValue(); } },
                {"usages", n => { Usages = n.GetCollectionOfObjectValues<ProjectIssueTypes>(ProjectIssueTypes.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("id", Id);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<WorkflowScope>("scope", Scope);
            writer.WriteEnumValue<JiraWorkflowStatus_statusCategory>("statusCategory", StatusCategory);
            writer.WriteStringValue("statusReference", StatusReference);
            writer.WriteCollectionOfObjectValues<ProjectIssueTypes>("usages", Usages);
        }
    }
}
