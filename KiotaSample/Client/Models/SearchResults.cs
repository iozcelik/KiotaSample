// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// The result of a JQL search.
    /// </summary>
    public class SearchResults : IParsable {
        /// <summary>Expand options that include additional search result details in the response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Expand { get; private set; }
#nullable restore
#else
        public string Expand { get; private set; }
#endif
        /// <summary>The list of issues found by the search.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<IssueBean>? Issues { get; private set; }
#nullable restore
#else
        public List<IssueBean> Issues { get; private set; }
#endif
        /// <summary>The maximum number of results that could be on the page.</summary>
        public int? MaxResults { get; private set; }
        /// <summary>The ID and name of each field in the search results.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SearchResults_names? Names { get; private set; }
#nullable restore
#else
        public SearchResults_names Names { get; private set; }
#endif
        /// <summary>The schema describing the field types in the search results.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SearchResults_schema? Schema { get; private set; }
#nullable restore
#else
        public SearchResults_schema Schema { get; private set; }
#endif
        /// <summary>The index of the first item returned on the page.</summary>
        public int? StartAt { get; private set; }
        /// <summary>The number of results on the page.</summary>
        public int? Total { get; private set; }
        /// <summary>Any warnings related to the JQL query.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? WarningMessages { get; private set; }
#nullable restore
#else
        public List<string> WarningMessages { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SearchResults CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SearchResults();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"expand", n => { Expand = n.GetStringValue(); } },
                {"issues", n => { Issues = n.GetCollectionOfObjectValues<IssueBean>(IssueBean.CreateFromDiscriminatorValue)?.ToList(); } },
                {"maxResults", n => { MaxResults = n.GetIntValue(); } },
                {"names", n => { Names = n.GetObjectValue<SearchResults_names>(SearchResults_names.CreateFromDiscriminatorValue); } },
                {"schema", n => { Schema = n.GetObjectValue<SearchResults_schema>(SearchResults_schema.CreateFromDiscriminatorValue); } },
                {"startAt", n => { StartAt = n.GetIntValue(); } },
                {"total", n => { Total = n.GetIntValue(); } },
                {"warningMessages", n => { WarningMessages = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
        }
    }
}
