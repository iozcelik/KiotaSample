// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// The status of the item.
    /// </summary>
    public class Status : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Details of the icon representing the status. If not provided, no status icon displays in Jira.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.Icon? Icon { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.Icon Icon { get; set; }
#endif
        /// <summary>Whether the item is resolved. If set to &quot;true&quot;, the link to the issue is displayed in a strikethrough font, otherwise the link displays in normal font.</summary>
        public bool? Resolved { get; set; }
        /// <summary>
        /// Instantiates a new Status and sets the default values.
        /// </summary>
        public Status() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Status CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Status();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"icon", n => { Icon = n.GetObjectValue<AtlassianClient.Models.Icon>(AtlassianClient.Models.Icon.CreateFromDiscriminatorValue); } },
                {"resolved", n => { Resolved = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<AtlassianClient.Models.Icon>("icon", Icon);
            writer.WriteBoolValue("resolved", Resolved);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
