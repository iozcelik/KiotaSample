// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of a link between issues.
    /// </summary>
    public class IssueLink : IParsable {
        /// <summary>The ID of the issue link.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; private set; }
#nullable restore
#else
        public string Id { get; private set; }
#endif
        /// <summary>Provides details about the linked issue. If presenting this link in a user interface, use the `inward` field of the issue link type to label the link.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public LinkedIssue? InwardIssue { get; set; }
#nullable restore
#else
        public LinkedIssue InwardIssue { get; set; }
#endif
        /// <summary>Provides details about the linked issue. If presenting this link in a user interface, use the `outward` field of the issue link type to label the link.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public LinkedIssue? OutwardIssue { get; set; }
#nullable restore
#else
        public LinkedIssue OutwardIssue { get; set; }
#endif
        /// <summary>The URL of the issue link.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Self { get; private set; }
#nullable restore
#else
        public string Self { get; private set; }
#endif
        /// <summary>The type of link between the issues.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public IssueLinkType? Type { get; set; }
#nullable restore
#else
        public IssueLinkType Type { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static IssueLink CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new IssueLink();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"id", n => { Id = n.GetStringValue(); } },
                {"inwardIssue", n => { InwardIssue = n.GetObjectValue<LinkedIssue>(LinkedIssue.CreateFromDiscriminatorValue); } },
                {"outwardIssue", n => { OutwardIssue = n.GetObjectValue<LinkedIssue>(LinkedIssue.CreateFromDiscriminatorValue); } },
                {"self", n => { Self = n.GetStringValue(); } },
                {"type", n => { Type = n.GetObjectValue<IssueLinkType>(IssueLinkType.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<LinkedIssue>("inwardIssue", InwardIssue);
            writer.WriteObjectValue<LinkedIssue>("outwardIssue", OutwardIssue);
            writer.WriteObjectValue<IssueLinkType>("type", Type);
        }
    }
}
