// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// A comment.
    /// </summary>
    public class Comment : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The ID of the user who created the comment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UserDetails? Author { get; private set; }
#nullable restore
#else
        public UserDetails Author { get; private set; }
#endif
        /// <summary>The date and time at which the comment was created.</summary>
        public DateTimeOffset? Created { get; private set; }
        /// <summary>The ID of the comment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; private set; }
#nullable restore
#else
        public string Id { get; private set; }
#endif
        /// <summary>Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature.</summary>
        public bool? JsdAuthorCanSeeRequest { get; private set; }
        /// <summary>Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn&apos;t use Jira Service Desk or the project isn&apos;t a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation.</summary>
        public bool? JsdPublic { get; private set; }
        /// <summary>A list of comment properties. Optional on create and update.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<EntityProperty>? Properties { get; set; }
#nullable restore
#else
        public List<EntityProperty> Properties { get; set; }
#endif
        /// <summary>The rendered version of the comment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RenderedBody { get; private set; }
#nullable restore
#else
        public string RenderedBody { get; private set; }
#endif
        /// <summary>The URL of the comment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Self { get; private set; }
#nullable restore
#else
        public string Self { get; private set; }
#endif
        /// <summary>The ID of the user who updated the comment last.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UserDetails? UpdateAuthor { get; private set; }
#nullable restore
#else
        public UserDetails UpdateAuthor { get; private set; }
#endif
        /// <summary>The date and time at which the comment was updated last.</summary>
        public DateTimeOffset? Updated { get; private set; }
        /// <summary>The group or role to which this comment is visible. Optional on create and update.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.Visibility? Visibility { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.Visibility Visibility { get; set; }
#endif
        /// <summary>
        /// Instantiates a new Comment and sets the default values.
        /// </summary>
        public Comment() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Comment CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Comment();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"author", n => { Author = n.GetObjectValue<UserDetails>(UserDetails.CreateFromDiscriminatorValue); } },
                {"created", n => { Created = n.GetDateTimeOffsetValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"jsdAuthorCanSeeRequest", n => { JsdAuthorCanSeeRequest = n.GetBoolValue(); } },
                {"jsdPublic", n => { JsdPublic = n.GetBoolValue(); } },
                {"properties", n => { Properties = n.GetCollectionOfObjectValues<EntityProperty>(EntityProperty.CreateFromDiscriminatorValue)?.ToList(); } },
                {"renderedBody", n => { RenderedBody = n.GetStringValue(); } },
                {"self", n => { Self = n.GetStringValue(); } },
                {"updateAuthor", n => { UpdateAuthor = n.GetObjectValue<UserDetails>(UserDetails.CreateFromDiscriminatorValue); } },
                {"updated", n => { Updated = n.GetDateTimeOffsetValue(); } },
                {"visibility", n => { Visibility = n.GetObjectValue<AtlassianClient.Models.Visibility>(AtlassianClient.Models.Visibility.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<EntityProperty>("properties", Properties);
            writer.WriteObjectValue<AtlassianClient.Models.Visibility>("visibility", Visibility);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
