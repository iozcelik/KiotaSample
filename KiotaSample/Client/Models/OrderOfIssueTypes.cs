// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// An ordered list of issue type IDs and information about where to move them.
    /// </summary>
    public class OrderOfIssueTypes : IParsable {
        /// <summary>The ID of the issue type to place the moved issue types after. Required if `position` isn&apos;t provided.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? After { get; set; }
#nullable restore
#else
        public string After { get; set; }
#endif
        /// <summary>A list of the issue type IDs to move. The order of the issue type IDs in the list is the order they are given after the move.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? IssueTypeIds { get; set; }
#nullable restore
#else
        public List<string> IssueTypeIds { get; set; }
#endif
        /// <summary>The position the issue types should be moved to. Required if `after` isn&apos;t provided.</summary>
        public OrderOfIssueTypes_position? Position { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static OrderOfIssueTypes CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new OrderOfIssueTypes();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"after", n => { After = n.GetStringValue(); } },
                {"issueTypeIds", n => { IssueTypeIds = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"position", n => { Position = n.GetEnumValue<OrderOfIssueTypes_position>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("after", After);
            writer.WriteCollectionOfPrimitiveValues<string>("issueTypeIds", IssueTypeIds);
            writer.WriteEnumValue<OrderOfIssueTypes_position>("position", Position);
        }
    }
}
