// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details about a project.
    /// </summary>
    public class Project : IParsable {
        /// <summary>Whether the project is archived.</summary>
        public bool? Archived { get; private set; }
        /// <summary>The user who archived the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public User? ArchivedBy { get; private set; }
#nullable restore
#else
        public User ArchivedBy { get; private set; }
#endif
        /// <summary>The date when the project was archived.</summary>
        public DateTimeOffset? ArchivedDate { get; private set; }
        /// <summary>The default assignee when creating issues for this project.</summary>
        public Project_assigneeType? AssigneeType { get; private set; }
        /// <summary>The URLs of the project&apos;s avatars.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AvatarUrlsBean? AvatarUrls { get; private set; }
#nullable restore
#else
        public AvatarUrlsBean AvatarUrls { get; private set; }
#endif
        /// <summary>List of the components contained in the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ProjectComponent>? Components { get; private set; }
#nullable restore
#else
        public List<ProjectComponent> Components { get; private set; }
#endif
        /// <summary>Whether the project is marked as deleted.</summary>
        public bool? Deleted { get; private set; }
        /// <summary>The user who marked the project as deleted.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public User? DeletedBy { get; private set; }
#nullable restore
#else
        public User DeletedBy { get; private set; }
#endif
        /// <summary>The date when the project was marked as deleted.</summary>
        public DateTimeOffset? DeletedDate { get; private set; }
        /// <summary>A brief description of the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; private set; }
#nullable restore
#else
        public string Description { get; private set; }
#endif
        /// <summary>An email address associated with the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Email { get; set; }
#nullable restore
#else
        public string Email { get; set; }
#endif
        /// <summary>Expand options that include additional project details in the response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Expand { get; private set; }
#nullable restore
#else
        public string Expand { get; private set; }
#endif
        /// <summary>Whether the project is selected as a favorite.</summary>
        public bool? Favourite { get; set; }
        /// <summary>The ID of the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Insights about the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ProjectInsight? Insight { get; private set; }
#nullable restore
#else
        public ProjectInsight Insight { get; private set; }
#endif
        /// <summary>Whether the project is private from the user&apos;s perspective. This means the user can&apos;t see the project or any associated issues.</summary>
        public bool? IsPrivate { get; private set; }
        /// <summary>The issue type hierarchy for the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Hierarchy? IssueTypeHierarchy { get; private set; }
#nullable restore
#else
        public Hierarchy IssueTypeHierarchy { get; private set; }
#endif
        /// <summary>List of the issue types available in the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<IssueTypeDetails>? IssueTypes { get; private set; }
#nullable restore
#else
        public List<IssueTypeDetails> IssueTypes { get; private set; }
#endif
        /// <summary>The key of the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; private set; }
#nullable restore
#else
        public string Key { get; private set; }
#endif
        /// <summary>The project landing page info.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ProjectLandingPageInfo? LandingPageInfo { get; private set; }
#nullable restore
#else
        public ProjectLandingPageInfo LandingPageInfo { get; private set; }
#endif
        /// <summary>The username of the project lead.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public User? Lead { get; private set; }
#nullable restore
#else
        public User Lead { get; private set; }
#endif
        /// <summary>The name of the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; private set; }
#nullable restore
#else
        public string Name { get; private set; }
#endif
        /// <summary>User permissions on the project</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ProjectPermissions? Permissions { get; private set; }
#nullable restore
#else
        public ProjectPermissions Permissions { get; private set; }
#endif
        /// <summary>The category the project belongs to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.ProjectCategory? ProjectCategory { get; private set; }
#nullable restore
#else
        public AtlassianClient.Models.ProjectCategory ProjectCategory { get; private set; }
#endif
        /// <summary>The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.</summary>
        public Project_projectTypeKey? ProjectTypeKey { get; private set; }
        /// <summary>Map of project properties</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Project_properties? Properties { get; private set; }
#nullable restore
#else
        public Project_properties Properties { get; private set; }
#endif
        /// <summary>The date when the project is deleted permanently.</summary>
        public DateTimeOffset? RetentionTillDate { get; private set; }
        /// <summary>The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Project_roles? Roles { get; private set; }
#nullable restore
#else
        public Project_roles Roles { get; private set; }
#endif
        /// <summary>The URL of the project details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Self { get; private set; }
#nullable restore
#else
        public string Self { get; private set; }
#endif
        /// <summary>Whether the project is simplified.</summary>
        public bool? Simplified { get; private set; }
        /// <summary>The type of the project.</summary>
        public Project_style? Style { get; private set; }
        /// <summary>A link to information about this project, such as project documentation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Url { get; private set; }
#nullable restore
#else
        public string Url { get; private set; }
#endif
        /// <summary>Unique ID for next-gen projects.</summary>
        public Guid? Uuid { get; private set; }
        /// <summary>The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<VersionObject>? Versions { get; private set; }
#nullable restore
#else
        public List<VersionObject> Versions { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Project CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Project();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"archived", n => { Archived = n.GetBoolValue(); } },
                {"archivedBy", n => { ArchivedBy = n.GetObjectValue<User>(User.CreateFromDiscriminatorValue); } },
                {"archivedDate", n => { ArchivedDate = n.GetDateTimeOffsetValue(); } },
                {"assigneeType", n => { AssigneeType = n.GetEnumValue<Project_assigneeType>(); } },
                {"avatarUrls", n => { AvatarUrls = n.GetObjectValue<AvatarUrlsBean>(AvatarUrlsBean.CreateFromDiscriminatorValue); } },
                {"components", n => { Components = n.GetCollectionOfObjectValues<ProjectComponent>(ProjectComponent.CreateFromDiscriminatorValue)?.ToList(); } },
                {"deleted", n => { Deleted = n.GetBoolValue(); } },
                {"deletedBy", n => { DeletedBy = n.GetObjectValue<User>(User.CreateFromDiscriminatorValue); } },
                {"deletedDate", n => { DeletedDate = n.GetDateTimeOffsetValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"email", n => { Email = n.GetStringValue(); } },
                {"expand", n => { Expand = n.GetStringValue(); } },
                {"favourite", n => { Favourite = n.GetBoolValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"insight", n => { Insight = n.GetObjectValue<ProjectInsight>(ProjectInsight.CreateFromDiscriminatorValue); } },
                {"isPrivate", n => { IsPrivate = n.GetBoolValue(); } },
                {"issueTypeHierarchy", n => { IssueTypeHierarchy = n.GetObjectValue<Hierarchy>(Hierarchy.CreateFromDiscriminatorValue); } },
                {"issueTypes", n => { IssueTypes = n.GetCollectionOfObjectValues<IssueTypeDetails>(IssueTypeDetails.CreateFromDiscriminatorValue)?.ToList(); } },
                {"key", n => { Key = n.GetStringValue(); } },
                {"landingPageInfo", n => { LandingPageInfo = n.GetObjectValue<ProjectLandingPageInfo>(ProjectLandingPageInfo.CreateFromDiscriminatorValue); } },
                {"lead", n => { Lead = n.GetObjectValue<User>(User.CreateFromDiscriminatorValue); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"permissions", n => { Permissions = n.GetObjectValue<ProjectPermissions>(ProjectPermissions.CreateFromDiscriminatorValue); } },
                {"projectCategory", n => { ProjectCategory = n.GetObjectValue<AtlassianClient.Models.ProjectCategory>(AtlassianClient.Models.ProjectCategory.CreateFromDiscriminatorValue); } },
                {"projectTypeKey", n => { ProjectTypeKey = n.GetEnumValue<Project_projectTypeKey>(); } },
                {"properties", n => { Properties = n.GetObjectValue<Project_properties>(Project_properties.CreateFromDiscriminatorValue); } },
                {"retentionTillDate", n => { RetentionTillDate = n.GetDateTimeOffsetValue(); } },
                {"roles", n => { Roles = n.GetObjectValue<Project_roles>(Project_roles.CreateFromDiscriminatorValue); } },
                {"self", n => { Self = n.GetStringValue(); } },
                {"simplified", n => { Simplified = n.GetBoolValue(); } },
                {"style", n => { Style = n.GetEnumValue<Project_style>(); } },
                {"url", n => { Url = n.GetStringValue(); } },
                {"uuid", n => { Uuid = n.GetGuidValue(); } },
                {"versions", n => { Versions = n.GetCollectionOfObjectValues<VersionObject>(VersionObject.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("email", Email);
            writer.WriteBoolValue("favourite", Favourite);
            writer.WriteStringValue("id", Id);
        }
    }
}
