// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    public class Errors : IParsable {
        /// <summary>The issueIsSubtask property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Error? IssueIsSubtask { get; set; }
#nullable restore
#else
        public Error IssueIsSubtask { get; set; }
#endif
        /// <summary>The issuesInArchivedProjects property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Error? IssuesInArchivedProjects { get; set; }
#nullable restore
#else
        public Error IssuesInArchivedProjects { get; set; }
#endif
        /// <summary>The issuesInUnlicensedProjects property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Error? IssuesInUnlicensedProjects { get; set; }
#nullable restore
#else
        public Error IssuesInUnlicensedProjects { get; set; }
#endif
        /// <summary>The issuesNotFound property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Error? IssuesNotFound { get; set; }
#nullable restore
#else
        public Error IssuesNotFound { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Errors CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Errors();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"issueIsSubtask", n => { IssueIsSubtask = n.GetObjectValue<Error>(Error.CreateFromDiscriminatorValue); } },
                {"issuesInArchivedProjects", n => { IssuesInArchivedProjects = n.GetObjectValue<Error>(Error.CreateFromDiscriminatorValue); } },
                {"issuesInUnlicensedProjects", n => { IssuesInUnlicensedProjects = n.GetObjectValue<Error>(Error.CreateFromDiscriminatorValue); } },
                {"issuesNotFound", n => { IssuesNotFound = n.GetObjectValue<Error>(Error.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<Error>("issueIsSubtask", IssueIsSubtask);
            writer.WriteObjectValue<Error>("issuesInArchivedProjects", IssuesInArchivedProjects);
            writer.WriteObjectValue<Error>("issuesInUnlicensedProjects", IssuesInUnlicensedProjects);
            writer.WriteObjectValue<Error>("issuesNotFound", IssuesNotFound);
        }
    }
}
