// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of an avatar.
    /// </summary>
    public class Avatar : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The file name of the avatar icon. Returned for system avatars.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileName { get; private set; }
#nullable restore
#else
        public string FileName { get; private set; }
#endif
        /// <summary>The ID of the avatar.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Whether the avatar can be deleted.</summary>
        public bool? IsDeletable { get; private set; }
        /// <summary>Whether the avatar is used in Jira. For example, shown as a project&apos;s avatar.</summary>
        public bool? IsSelected { get; private set; }
        /// <summary>Whether the avatar is a system avatar.</summary>
        public bool? IsSystemAvatar { get; private set; }
        /// <summary>The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Owner { get; private set; }
#nullable restore
#else
        public string Owner { get; private set; }
#endif
        /// <summary>The list of avatar icon URLs.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Avatar_urls? Urls { get; private set; }
#nullable restore
#else
        public Avatar_urls Urls { get; private set; }
#endif
        /// <summary>
        /// Instantiates a new Avatar and sets the default values.
        /// </summary>
        public Avatar() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Avatar CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Avatar();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"fileName", n => { FileName = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"isDeletable", n => { IsDeletable = n.GetBoolValue(); } },
                {"isSelected", n => { IsSelected = n.GetBoolValue(); } },
                {"isSystemAvatar", n => { IsSystemAvatar = n.GetBoolValue(); } },
                {"owner", n => { Owner = n.GetStringValue(); } },
                {"urls", n => { Urls = n.GetObjectValue<Avatar_urls>(Avatar_urls.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("id", Id);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
