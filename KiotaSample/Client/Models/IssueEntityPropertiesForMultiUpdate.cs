// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// An issue ID with entity property values. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information.
    /// </summary>
    public class IssueEntityPropertiesForMultiUpdate : IParsable {
        /// <summary>The ID of the issue.</summary>
        public long? IssueID { get; set; }
        /// <summary>Entity properties to set on the issue. The maximum length of an issue property value is 32768 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public IssueEntityPropertiesForMultiUpdate_properties? Properties { get; set; }
#nullable restore
#else
        public IssueEntityPropertiesForMultiUpdate_properties Properties { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static IssueEntityPropertiesForMultiUpdate CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new IssueEntityPropertiesForMultiUpdate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"issueID", n => { IssueID = n.GetLongValue(); } },
                {"properties", n => { Properties = n.GetObjectValue<IssueEntityPropertiesForMultiUpdate_properties>(IssueEntityPropertiesForMultiUpdate_properties.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteLongValue("issueID", IssueID);
            writer.WriteObjectValue<IssueEntityPropertiesForMultiUpdate_properties>("properties", Properties);
        }
    }
}
