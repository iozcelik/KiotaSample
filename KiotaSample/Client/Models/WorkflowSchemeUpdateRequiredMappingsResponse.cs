// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    public class WorkflowSchemeUpdateRequiredMappingsResponse : IParsable {
        /// <summary>The details of the statuses in the associated workflows.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<StatusMetadata>? Statuses { get; set; }
#nullable restore
#else
        public List<StatusMetadata> Statuses { get; set; }
#endif
        /// <summary>The statuses associated with each workflow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AtlassianClient.Models.StatusesPerWorkflow>? StatusesPerWorkflow { get; set; }
#nullable restore
#else
        public List<AtlassianClient.Models.StatusesPerWorkflow> StatusesPerWorkflow { get; set; }
#endif
        /// <summary>The list of required status mappings by issue type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<RequiredMappingByIssueType>? StatusMappingsByIssueTypes { get; set; }
#nullable restore
#else
        public List<RequiredMappingByIssueType> StatusMappingsByIssueTypes { get; set; }
#endif
        /// <summary>The list of required status mappings by workflow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<RequiredMappingByWorkflows>? StatusMappingsByWorkflows { get; set; }
#nullable restore
#else
        public List<RequiredMappingByWorkflows> StatusMappingsByWorkflows { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WorkflowSchemeUpdateRequiredMappingsResponse CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WorkflowSchemeUpdateRequiredMappingsResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"statusMappingsByIssueTypes", n => { StatusMappingsByIssueTypes = n.GetCollectionOfObjectValues<RequiredMappingByIssueType>(RequiredMappingByIssueType.CreateFromDiscriminatorValue)?.ToList(); } },
                {"statusMappingsByWorkflows", n => { StatusMappingsByWorkflows = n.GetCollectionOfObjectValues<RequiredMappingByWorkflows>(RequiredMappingByWorkflows.CreateFromDiscriminatorValue)?.ToList(); } },
                {"statuses", n => { Statuses = n.GetCollectionOfObjectValues<StatusMetadata>(StatusMetadata.CreateFromDiscriminatorValue)?.ToList(); } },
                {"statusesPerWorkflow", n => { StatusesPerWorkflow = n.GetCollectionOfObjectValues<AtlassianClient.Models.StatusesPerWorkflow>(AtlassianClient.Models.StatusesPerWorkflow.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<StatusMetadata>("statuses", Statuses);
            writer.WriteCollectionOfObjectValues<AtlassianClient.Models.StatusesPerWorkflow>("statusesPerWorkflow", StatusesPerWorkflow);
            writer.WriteCollectionOfObjectValues<RequiredMappingByIssueType>("statusMappingsByIssueTypes", StatusMappingsByIssueTypes);
            writer.WriteCollectionOfObjectValues<RequiredMappingByWorkflows>("statusMappingsByWorkflows", StatusMappingsByWorkflows);
        }
    }
}
