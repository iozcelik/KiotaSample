// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// The details of a workflow transition rules.
    /// </summary>
    public class CreateWorkflowTransitionRulesDetails : IParsable {
        /// <summary>The workflow conditions.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public CreateWorkflowCondition? Conditions { get; set; }
#nullable restore
#else
        public CreateWorkflowCondition Conditions { get; set; }
#endif
        /// <summary>The workflow post functions.**Note:** The default post functions are always added to the *initial* transition, as in:    &quot;postFunctions&quot;: [        {            &quot;type&quot;: &quot;IssueCreateFunction&quot;        },        {            &quot;type&quot;: &quot;IssueReindexFunction&quot;        },        {            &quot;type&quot;: &quot;FireIssueEventFunction&quot;,            &quot;configuration&quot;: {                &quot;event&quot;: {                    &quot;id&quot;: &quot;1&quot;,                    &quot;name&quot;: &quot;issue_created&quot;                }            }        }    ]**Note:** The default post functions are always added to the *global* and *directed* transitions, as in:    &quot;postFunctions&quot;: [        {            &quot;type&quot;: &quot;UpdateIssueStatusFunction&quot;        },        {            &quot;type&quot;: &quot;CreateCommentFunction&quot;        },        {            &quot;type&quot;: &quot;GenerateChangeHistoryFunction&quot;        },        {            &quot;type&quot;: &quot;IssueReindexFunction&quot;        },        {            &quot;type&quot;: &quot;FireIssueEventFunction&quot;,            &quot;configuration&quot;: {                &quot;event&quot;: {                    &quot;id&quot;: &quot;13&quot;,                    &quot;name&quot;: &quot;issue_generic&quot;                }            }        }    ]</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CreateWorkflowTransitionRule>? PostFunctions { get; set; }
#nullable restore
#else
        public List<CreateWorkflowTransitionRule> PostFunctions { get; set; }
#endif
        /// <summary>The workflow validators.**Note:** The default permission validator is always added to the *initial* transition, as in:    &quot;validators&quot;: [        {            &quot;type&quot;: &quot;PermissionValidator&quot;,            &quot;configuration&quot;: {                &quot;permissionKey&quot;: &quot;CREATE_ISSUES&quot;            }        }    ]</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CreateWorkflowTransitionRule>? Validators { get; set; }
#nullable restore
#else
        public List<CreateWorkflowTransitionRule> Validators { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CreateWorkflowTransitionRulesDetails CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CreateWorkflowTransitionRulesDetails();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"conditions", n => { Conditions = n.GetObjectValue<CreateWorkflowCondition>(CreateWorkflowCondition.CreateFromDiscriminatorValue); } },
                {"postFunctions", n => { PostFunctions = n.GetCollectionOfObjectValues<CreateWorkflowTransitionRule>(CreateWorkflowTransitionRule.CreateFromDiscriminatorValue)?.ToList(); } },
                {"validators", n => { Validators = n.GetCollectionOfObjectValues<CreateWorkflowTransitionRule>(CreateWorkflowTransitionRule.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<CreateWorkflowCondition>("conditions", Conditions);
            writer.WriteCollectionOfObjectValues<CreateWorkflowTransitionRule>("postFunctions", PostFunctions);
            writer.WriteCollectionOfObjectValues<CreateWorkflowTransitionRule>("validators", Validators);
        }
    }
}
