// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details about a component with a count of the issues it contains.
    /// </summary>
    public class ComponentWithIssueCount : IParsable {
        /// <summary>The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public User? Assignee { get; set; }
#nullable restore
#else
        public User Assignee { get; set; }
#endif
        /// <summary>The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values: *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in. *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component. *  `UNASSIGNED` an assignee is not set for issues created with this component. *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.</summary>
        public ComponentWithIssueCount_assigneeType? AssigneeType { get; private set; }
        /// <summary>The description for the component.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; private set; }
#nullable restore
#else
        public string Description { get; private set; }
#endif
        /// <summary>The unique identifier for the component.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; private set; }
#nullable restore
#else
        public string Id { get; private set; }
#endif
        /// <summary>Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.</summary>
        public bool? IsAssigneeTypeValid { get; private set; }
        /// <summary>Count of issues for the component.</summary>
        public long? IssueCount { get; private set; }
        /// <summary>The user details for the component&apos;s lead user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public User? Lead { get; set; }
#nullable restore
#else
        public User Lead { get; set; }
#endif
        /// <summary>The name for the component.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; private set; }
#nullable restore
#else
        public string Name { get; private set; }
#endif
        /// <summary>The key of the project to which the component is assigned.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Project { get; private set; }
#nullable restore
#else
        public string Project { get; private set; }
#endif
        /// <summary>Not used.</summary>
        public long? ProjectId { get; private set; }
        /// <summary>The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public User? RealAssignee { get; set; }
#nullable restore
#else
        public User RealAssignee { get; set; }
#endif
        /// <summary>The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values: *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in. *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in. *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues. *  `PROJECT_DEFAULT` when none of the preceding cases are true.</summary>
        public ComponentWithIssueCount_realAssigneeType? RealAssigneeType { get; private set; }
        /// <summary>The URL for this count of the issues contained in the component.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Self { get; private set; }
#nullable restore
#else
        public string Self { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ComponentWithIssueCount CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ComponentWithIssueCount();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"assignee", n => { Assignee = n.GetObjectValue<User>(User.CreateFromDiscriminatorValue); } },
                {"assigneeType", n => { AssigneeType = n.GetEnumValue<ComponentWithIssueCount_assigneeType>(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"isAssigneeTypeValid", n => { IsAssigneeTypeValid = n.GetBoolValue(); } },
                {"issueCount", n => { IssueCount = n.GetLongValue(); } },
                {"lead", n => { Lead = n.GetObjectValue<User>(User.CreateFromDiscriminatorValue); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"project", n => { Project = n.GetStringValue(); } },
                {"projectId", n => { ProjectId = n.GetLongValue(); } },
                {"realAssignee", n => { RealAssignee = n.GetObjectValue<User>(User.CreateFromDiscriminatorValue); } },
                {"realAssigneeType", n => { RealAssigneeType = n.GetEnumValue<ComponentWithIssueCount_realAssigneeType>(); } },
                {"self", n => { Self = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<User>("assignee", Assignee);
            writer.WriteObjectValue<User>("lead", Lead);
            writer.WriteObjectValue<User>("realAssignee", RealAssignee);
        }
    }
}
