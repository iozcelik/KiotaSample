// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details about the configuration of Jira.
    /// </summary>
    public class Configuration : IParsable {
        /// <summary>Whether the ability to add attachments to issues is enabled.</summary>
        public bool? AttachmentsEnabled { get; private set; }
        /// <summary>Whether the ability to link issues is enabled.</summary>
        public bool? IssueLinkingEnabled { get; private set; }
        /// <summary>Whether the ability to create subtasks for issues is enabled.</summary>
        public bool? SubTasksEnabled { get; private set; }
        /// <summary>The configuration of time tracking.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.TimeTrackingConfiguration? TimeTrackingConfiguration { get; private set; }
#nullable restore
#else
        public AtlassianClient.Models.TimeTrackingConfiguration TimeTrackingConfiguration { get; private set; }
#endif
        /// <summary>Whether the ability to track time is enabled. This property is deprecated.</summary>
        public bool? TimeTrackingEnabled { get; private set; }
        /// <summary>Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.</summary>
        public bool? UnassignedIssuesAllowed { get; private set; }
        /// <summary>Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.</summary>
        public bool? VotingEnabled { get; private set; }
        /// <summary>Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.</summary>
        public bool? WatchingEnabled { get; private set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Configuration CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Configuration();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"attachmentsEnabled", n => { AttachmentsEnabled = n.GetBoolValue(); } },
                {"issueLinkingEnabled", n => { IssueLinkingEnabled = n.GetBoolValue(); } },
                {"subTasksEnabled", n => { SubTasksEnabled = n.GetBoolValue(); } },
                {"timeTrackingConfiguration", n => { TimeTrackingConfiguration = n.GetObjectValue<AtlassianClient.Models.TimeTrackingConfiguration>(AtlassianClient.Models.TimeTrackingConfiguration.CreateFromDiscriminatorValue); } },
                {"timeTrackingEnabled", n => { TimeTrackingEnabled = n.GetBoolValue(); } },
                {"unassignedIssuesAllowed", n => { UnassignedIssuesAllowed = n.GetBoolValue(); } },
                {"votingEnabled", n => { VotingEnabled = n.GetBoolValue(); } },
                {"watchingEnabled", n => { WatchingEnabled = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
        }
    }
}
