// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// The description of the page of issues loaded by the provided JQL query.
    /// </summary>
    public class IssuesJqlMetaDataBean : IParsable {
        /// <summary>The number of issues that were loaded in this evaluation.</summary>
        public int? Count { get; set; }
        /// <summary>The maximum number of issues that could be loaded in this evaluation.</summary>
        public int? MaxResults { get; set; }
        /// <summary>The index of the first issue.</summary>
        public long? StartAt { get; set; }
        /// <summary>The total number of issues the JQL returned.</summary>
        public long? TotalCount { get; set; }
        /// <summary>Any warnings related to the JQL query. Present only if the validation mode was set to `warn`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ValidationWarnings { get; set; }
#nullable restore
#else
        public List<string> ValidationWarnings { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static IssuesJqlMetaDataBean CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new IssuesJqlMetaDataBean();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"count", n => { Count = n.GetIntValue(); } },
                {"maxResults", n => { MaxResults = n.GetIntValue(); } },
                {"startAt", n => { StartAt = n.GetLongValue(); } },
                {"totalCount", n => { TotalCount = n.GetLongValue(); } },
                {"validationWarnings", n => { ValidationWarnings = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("count", Count);
            writer.WriteIntValue("maxResults", MaxResults);
            writer.WriteLongValue("startAt", StartAt);
            writer.WriteLongValue("totalCount", TotalCount);
            writer.WriteCollectionOfPrimitiveValues<string>("validationWarnings", ValidationWarnings);
        }
    }
}
