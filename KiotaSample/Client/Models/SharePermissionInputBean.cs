// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    public class SharePermissionInputBean : IParsable {
        /// <summary>The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AccountId { get; set; }
#nullable restore
#else
        public string AccountId { get; set; }
#endif
        /// <summary>The ID of the group, which uniquely identifies the group across all Atlassian products.For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. Cannot be provided with `groupname`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GroupId { get; set; }
#nullable restore
#else
        public string GroupId { get; set; }
#endif
        /// <summary>The name of the group to share the filter with. Set `type` to `group`. Please note that the name of a group is mutable, to reliably identify a group use `groupId`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Groupname { get; set; }
#nullable restore
#else
        public string Groupname { get; set; }
#endif
        /// <summary>The ID of the project to share the filter with. Set `type` to `project`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectId { get; set; }
#nullable restore
#else
        public string ProjectId { get; set; }
#endif
        /// <summary>The ID of the project role to share the filter with. Set `type` to `projectRole` and the `projectId` for the project that the role is in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectRoleId { get; set; }
#nullable restore
#else
        public string ProjectRoleId { get; set; }
#endif
        /// <summary>The rights for the share permission.</summary>
        public int? Rights { get; set; }
        /// <summary>The type of the share permission.Specify the type as follows: *  `user` Share with a user. *  `group` Share with a group. Specify `groupname` as well. *  `project` Share with a project. Specify `projectId` as well. *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well. *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set. *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.</summary>
        public SharePermissionInputBean_type? Type { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SharePermissionInputBean CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SharePermissionInputBean();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"accountId", n => { AccountId = n.GetStringValue(); } },
                {"groupId", n => { GroupId = n.GetStringValue(); } },
                {"groupname", n => { Groupname = n.GetStringValue(); } },
                {"projectId", n => { ProjectId = n.GetStringValue(); } },
                {"projectRoleId", n => { ProjectRoleId = n.GetStringValue(); } },
                {"rights", n => { Rights = n.GetIntValue(); } },
                {"type", n => { Type = n.GetEnumValue<SharePermissionInputBean_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("accountId", AccountId);
            writer.WriteStringValue("groupId", GroupId);
            writer.WriteStringValue("groupname", Groupname);
            writer.WriteStringValue("projectId", ProjectId);
            writer.WriteStringValue("projectRoleId", ProjectRoleId);
            writer.WriteIntValue("rights", Rights);
            writer.WriteEnumValue<SharePermissionInputBean_type>("type", Type);
        }
    }
}
