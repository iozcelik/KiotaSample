// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Information about the most recent use of a field.
    /// </summary>
    public class FieldLastUsed : IParsable {
        /// <summary>Last used value type: *  *TRACKED*: field is tracked and a last used date is available. *  *NOT\_TRACKED*: field is not tracked, last used date is not available. *  *NO\_INFORMATION*: field is tracked, but no last used date is available.</summary>
        public FieldLastUsed_type? Type { get; set; }
        /// <summary>The date when the value of the field last changed.</summary>
        public DateTimeOffset? Value { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static FieldLastUsed CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new FieldLastUsed();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"type", n => { Type = n.GetEnumValue<FieldLastUsed_type>(); } },
                {"value", n => { Value = n.GetDateTimeOffsetValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<FieldLastUsed_type>("type", Type);
            writer.WriteDateTimeOffsetValue("value", Value);
        }
    }
}
