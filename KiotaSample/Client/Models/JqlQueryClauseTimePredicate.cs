// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// A time predicate for a temporal JQL clause.
    /// </summary>
    public class JqlQueryClauseTimePredicate : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Details of an operand in a JQL clause.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JqlQueryClauseOperand? Operand { get; set; }
#nullable restore
#else
        public JqlQueryClauseOperand Operand { get; set; }
#endif
        /// <summary>The operator between the field and the operand.</summary>
        public JqlQueryClauseTimePredicate_operator? Operator { get; set; }
        /// <summary>
        /// Instantiates a new JqlQueryClauseTimePredicate and sets the default values.
        /// </summary>
        public JqlQueryClauseTimePredicate() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JqlQueryClauseTimePredicate CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JqlQueryClauseTimePredicate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"operand", n => { Operand = n.GetObjectValue<JqlQueryClauseOperand>(JqlQueryClauseOperand.CreateFromDiscriminatorValue); } },
                {"operator", n => { Operator = n.GetEnumValue<JqlQueryClauseTimePredicate_operator>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<JqlQueryClauseOperand>("operand", Operand);
            writer.WriteEnumValue<JqlQueryClauseTimePredicate_operator>("operator", Operator);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
