// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details about the analysed Jira expression.
    /// </summary>
    public class JiraExpressionAnalysis : IParsable {
        /// <summary>Details about the complexity of the analysed Jira expression.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JiraExpressionComplexity? Complexity { get; set; }
#nullable restore
#else
        public JiraExpressionComplexity Complexity { get; set; }
#endif
        /// <summary>A list of validation errors. Not included if the expression is valid.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<JiraExpressionValidationError>? Errors { get; set; }
#nullable restore
#else
        public List<JiraExpressionValidationError> Errors { get; set; }
#endif
        /// <summary>The analysed expression.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Expression { get; set; }
#nullable restore
#else
        public string Expression { get; set; }
#endif
        /// <summary>EXPERIMENTAL. The inferred type of the expression.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).</summary>
        public bool? Valid { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JiraExpressionAnalysis CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JiraExpressionAnalysis();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"complexity", n => { Complexity = n.GetObjectValue<JiraExpressionComplexity>(JiraExpressionComplexity.CreateFromDiscriminatorValue); } },
                {"errors", n => { Errors = n.GetCollectionOfObjectValues<JiraExpressionValidationError>(JiraExpressionValidationError.CreateFromDiscriminatorValue)?.ToList(); } },
                {"expression", n => { Expression = n.GetStringValue(); } },
                {"type", n => { Type = n.GetStringValue(); } },
                {"valid", n => { Valid = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<JiraExpressionComplexity>("complexity", Complexity);
            writer.WriteCollectionOfObjectValues<JiraExpressionValidationError>("errors", Errors);
            writer.WriteStringValue("expression", Expression);
            writer.WriteStringValue("type", Type);
            writer.WriteBoolValue("valid", Valid);
        }
    }
}
