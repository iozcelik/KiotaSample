// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// The details of a workflow.
    /// </summary>
    public class CreateWorkflowDetails : IParsable {
        /// <summary>The description of the workflow. The maximum length is 1000 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CreateWorkflowStatusDetails>? Statuses { get; set; }
#nullable restore
#else
        public List<CreateWorkflowStatusDetails> Statuses { get; set; }
#endif
        /// <summary>The transitions of the workflow. For the request to be valid, these transitions must: *  include one *initial* transition. *  not use the same name for a *global* and *directed* transition. *  have a unique name for each *global* transition. *  have a unique &apos;to&apos; status for each *global* transition. *  have unique names for each transition from a status. *  not have a &apos;from&apos; status on *initial* and *global* transitions. *  have a &apos;from&apos; status on *directed* transitions.All the transition statuses must be included in `statuses`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<CreateWorkflowTransitionDetails>? Transitions { get; set; }
#nullable restore
#else
        public List<CreateWorkflowTransitionDetails> Transitions { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static CreateWorkflowDetails CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new CreateWorkflowDetails();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"description", n => { Description = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"statuses", n => { Statuses = n.GetCollectionOfObjectValues<CreateWorkflowStatusDetails>(CreateWorkflowStatusDetails.CreateFromDiscriminatorValue)?.ToList(); } },
                {"transitions", n => { Transitions = n.GetCollectionOfObjectValues<CreateWorkflowTransitionDetails>(CreateWorkflowTransitionDetails.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("name", Name);
            writer.WriteCollectionOfObjectValues<CreateWorkflowStatusDetails>("statuses", Statuses);
            writer.WriteCollectionOfObjectValues<CreateWorkflowTransitionDetails>("transitions", Transitions);
        }
    }
}
