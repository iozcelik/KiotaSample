// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of an issue type hierarchy level.
    /// </summary>
    public class ProjectIssueTypesHierarchyLevel : IParsable {
        /// <summary>The ID of the issue type hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).</summary>
        public Guid? EntityId { get; private set; }
        /// <summary>The list of issue types in the hierarchy level.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<IssueTypeInfo>? IssueTypes { get; private set; }
#nullable restore
#else
        public List<IssueTypeInfo> IssueTypes { get; private set; }
#endif
        /// <summary>The level of the issue type hierarchy level.</summary>
        public int? Level { get; private set; }
        /// <summary>The name of the issue type hierarchy level.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; private set; }
#nullable restore
#else
        public string Name { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ProjectIssueTypesHierarchyLevel CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ProjectIssueTypesHierarchyLevel();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"entityId", n => { EntityId = n.GetGuidValue(); } },
                {"issueTypes", n => { IssueTypes = n.GetCollectionOfObjectValues<IssueTypeInfo>(IssueTypeInfo.CreateFromDiscriminatorValue)?.ToList(); } },
                {"level", n => { Level = n.GetIntValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
        }
    }
}
