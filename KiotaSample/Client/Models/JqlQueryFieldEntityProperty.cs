// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of an entity property.
    /// </summary>
    public class JqlQueryFieldEntityProperty : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The object on which the property is set.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Entity { get; set; }
#nullable restore
#else
        public string Entity { get; set; }
#endif
        /// <summary>The key of the property.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; set; }
#nullable restore
#else
        public string Key { get; set; }
#endif
        /// <summary>The path in the property value to query.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Path { get; set; }
#nullable restore
#else
        public string Path { get; set; }
#endif
        /// <summary>The type of the property value extraction. Not available if the extraction for the property is not registered on the instance with the [Entity property](https://developer.atlassian.com/cloud/jira/platform/modules/entity-property/) module.</summary>
        public JqlQueryFieldEntityProperty_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new JqlQueryFieldEntityProperty and sets the default values.
        /// </summary>
        public JqlQueryFieldEntityProperty() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JqlQueryFieldEntityProperty CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JqlQueryFieldEntityProperty();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"entity", n => { Entity = n.GetStringValue(); } },
                {"key", n => { Key = n.GetStringValue(); } },
                {"path", n => { Path = n.GetStringValue(); } },
                {"type", n => { Type = n.GetEnumValue<JqlQueryFieldEntityProperty_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("entity", Entity);
            writer.WriteStringValue("key", Key);
            writer.WriteStringValue("path", Path);
            writer.WriteEnumValue<JqlQueryFieldEntityProperty_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
