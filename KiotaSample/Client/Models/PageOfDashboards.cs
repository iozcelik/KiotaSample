// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// A page containing dashboard details.
    /// </summary>
    public class PageOfDashboards : IParsable {
        /// <summary>List of dashboards.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Dashboard>? Dashboards { get; private set; }
#nullable restore
#else
        public List<Dashboard> Dashboards { get; private set; }
#endif
        /// <summary>The maximum number of results that could be on the page.</summary>
        public int? MaxResults { get; private set; }
        /// <summary>The URL of the next page of results, if any.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Next { get; private set; }
#nullable restore
#else
        public string Next { get; private set; }
#endif
        /// <summary>The URL of the previous page of results, if any.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Prev { get; private set; }
#nullable restore
#else
        public string Prev { get; private set; }
#endif
        /// <summary>The index of the first item returned on the page.</summary>
        public int? StartAt { get; private set; }
        /// <summary>The number of results on the page.</summary>
        public int? Total { get; private set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static PageOfDashboards CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new PageOfDashboards();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"dashboards", n => { Dashboards = n.GetCollectionOfObjectValues<Dashboard>(Dashboard.CreateFromDiscriminatorValue)?.ToList(); } },
                {"maxResults", n => { MaxResults = n.GetIntValue(); } },
                {"next", n => { Next = n.GetStringValue(); } },
                {"prev", n => { Prev = n.GetStringValue(); } },
                {"startAt", n => { StartAt = n.GetIntValue(); } },
                {"total", n => { Total = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
        }
    }
}
