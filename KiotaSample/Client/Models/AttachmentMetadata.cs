// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Metadata for an issue attachment.
    /// </summary>
    public class AttachmentMetadata : IParsable {
        /// <summary>Details of the user who attached the file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public User? Author { get; private set; }
#nullable restore
#else
        public User Author { get; private set; }
#endif
        /// <summary>The URL of the attachment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Content { get; private set; }
#nullable restore
#else
        public string Content { get; private set; }
#endif
        /// <summary>The datetime the attachment was created.</summary>
        public DateTimeOffset? Created { get; private set; }
        /// <summary>The name of the attachment file.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Filename { get; private set; }
#nullable restore
#else
        public string Filename { get; private set; }
#endif
        /// <summary>The ID of the attachment.</summary>
        public long? Id { get; private set; }
        /// <summary>The MIME type of the attachment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MimeType { get; private set; }
#nullable restore
#else
        public string MimeType { get; private set; }
#endif
        /// <summary>Additional properties of the attachment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AttachmentMetadata_properties? Properties { get; private set; }
#nullable restore
#else
        public AttachmentMetadata_properties Properties { get; private set; }
#endif
        /// <summary>The URL of the attachment metadata details.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Self { get; private set; }
#nullable restore
#else
        public string Self { get; private set; }
#endif
        /// <summary>The size of the attachment.</summary>
        public long? Size { get; private set; }
        /// <summary>The URL of a thumbnail representing the attachment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Thumbnail { get; private set; }
#nullable restore
#else
        public string Thumbnail { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static AttachmentMetadata CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AttachmentMetadata();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"author", n => { Author = n.GetObjectValue<User>(User.CreateFromDiscriminatorValue); } },
                {"content", n => { Content = n.GetStringValue(); } },
                {"created", n => { Created = n.GetDateTimeOffsetValue(); } },
                {"filename", n => { Filename = n.GetStringValue(); } },
                {"id", n => { Id = n.GetLongValue(); } },
                {"mimeType", n => { MimeType = n.GetStringValue(); } },
                {"properties", n => { Properties = n.GetObjectValue<AttachmentMetadata_properties>(AttachmentMetadata_properties.CreateFromDiscriminatorValue); } },
                {"self", n => { Self = n.GetStringValue(); } },
                {"size", n => { Size = n.GetLongValue(); } },
                {"thumbnail", n => { Thumbnail = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
        }
    }
}
