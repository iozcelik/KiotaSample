// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// The request payload to get the required mappings for updating a workflow scheme.
    /// </summary>
    public class WorkflowSchemeUpdateRequiredMappingsRequest : IParsable {
        /// <summary>The ID of the new default workflow for this workflow scheme. Only used in global-scoped workflow schemes. If it isn&apos;t specified, is set to *Jira Workflow (jira)*.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultWorkflowId { get; set; }
#nullable restore
#else
        public string DefaultWorkflowId { get; set; }
#endif
        /// <summary>The ID of the workflow scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The new workflow to issue type mappings for this workflow scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<WorkflowSchemeAssociation>? WorkflowsForIssueTypes { get; set; }
#nullable restore
#else
        public List<WorkflowSchemeAssociation> WorkflowsForIssueTypes { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WorkflowSchemeUpdateRequiredMappingsRequest CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WorkflowSchemeUpdateRequiredMappingsRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"defaultWorkflowId", n => { DefaultWorkflowId = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"workflowsForIssueTypes", n => { WorkflowsForIssueTypes = n.GetCollectionOfObjectValues<WorkflowSchemeAssociation>(WorkflowSchemeAssociation.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("defaultWorkflowId", DefaultWorkflowId);
            writer.WriteStringValue("id", Id);
            writer.WriteCollectionOfObjectValues<WorkflowSchemeAssociation>("workflowsForIssueTypes", WorkflowsForIssueTypes);
        }
    }
}
