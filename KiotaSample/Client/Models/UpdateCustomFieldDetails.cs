// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of a custom field.
    /// </summary>
    public class UpdateCustomFieldDetails : IParsable {
        /// <summary>The description of the custom field. The maximum length is 40000 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The name of the custom field. It doesn&apos;t have to be unique. The maximum length is 255 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The searcher that defines the way the field is searched in Jira. It can be set to `null`, otherwise you must specify the valid searcher for the field type, as listed below (abbreviated values shown): *  `cascadingselect`: `cascadingselectsearcher` *  `datepicker`: `daterange` *  `datetime`: `datetimerange` *  `float`: `exactnumber` or `numberrange` *  `grouppicker`: `grouppickersearcher` *  `importid`: `exactnumber` or `numberrange` *  `labels`: `labelsearcher` *  `multicheckboxes`: `multiselectsearcher` *  `multigrouppicker`: `multiselectsearcher` *  `multiselect`: `multiselectsearcher` *  `multiuserpicker`: `userpickergroupsearcher` *  `multiversion`: `versionsearcher` *  `project`: `projectsearcher` *  `radiobuttons`: `multiselectsearcher` *  `readonlyfield`: `textsearcher` *  `select`: `multiselectsearcher` *  `textarea`: `textsearcher` *  `textfield`: `textsearcher` *  `url`: `exacttextsearcher` *  `userpicker`: `userpickergroupsearcher` *  `version`: `versionsearcher`</summary>
        public UpdateCustomFieldDetails_searcherKey? SearcherKey { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static UpdateCustomFieldDetails CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new UpdateCustomFieldDetails();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"description", n => { Description = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"searcherKey", n => { SearcherKey = n.GetEnumValue<UpdateCustomFieldDetails_searcherKey>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("name", Name);
            writer.WriteEnumValue<UpdateCustomFieldDetails_searcherKey>("searcherKey", SearcherKey);
        }
    }
}
