// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    public class IssueFieldOptionCreateBean : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Details of the projects the option is available in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public IssueFieldOptionConfiguration? Config { get; set; }
#nullable restore
#else
        public IssueFieldOptionConfiguration Config { get; set; }
#endif
        /// <summary>The properties of the option as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/) are defined in the descriptor for the issue field module.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public IssueFieldOptionCreateBean_properties? Properties { get; set; }
#nullable restore
#else
        public IssueFieldOptionCreateBean_properties Properties { get; set; }
#endif
        /// <summary>The option&apos;s name, which is displayed in Jira.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Value { get; set; }
#nullable restore
#else
        public string Value { get; set; }
#endif
        /// <summary>
        /// Instantiates a new IssueFieldOptionCreateBean and sets the default values.
        /// </summary>
        public IssueFieldOptionCreateBean() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static IssueFieldOptionCreateBean CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new IssueFieldOptionCreateBean();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"config", n => { Config = n.GetObjectValue<IssueFieldOptionConfiguration>(IssueFieldOptionConfiguration.CreateFromDiscriminatorValue); } },
                {"properties", n => { Properties = n.GetObjectValue<IssueFieldOptionCreateBean_properties>(IssueFieldOptionCreateBean_properties.CreateFromDiscriminatorValue); } },
                {"value", n => { Value = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<IssueFieldOptionConfiguration>("config", Config);
            writer.WriteObjectValue<IssueFieldOptionCreateBean_properties>("properties", Properties);
            writer.WriteStringValue("value", Value);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
