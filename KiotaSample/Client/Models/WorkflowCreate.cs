// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// The details of the workflows to create.
    /// </summary>
    public class WorkflowCreate : IParsable {
        /// <summary>The description of the workflow to create.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The name of the workflow to create.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The starting point for the statuses in the workflow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public WorkflowLayout? StartPointLayout { get; set; }
#nullable restore
#else
        public WorkflowLayout StartPointLayout { get; set; }
#endif
        /// <summary>The statuses associated with this workflow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<StatusLayoutUpdate>? Statuses { get; set; }
#nullable restore
#else
        public List<StatusLayoutUpdate> Statuses { get; set; }
#endif
        /// <summary>The transitions of this workflow.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<TransitionUpdateDTO>? Transitions { get; set; }
#nullable restore
#else
        public List<TransitionUpdateDTO> Transitions { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WorkflowCreate CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WorkflowCreate();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"description", n => { Description = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"startPointLayout", n => { StartPointLayout = n.GetObjectValue<WorkflowLayout>(WorkflowLayout.CreateFromDiscriminatorValue); } },
                {"statuses", n => { Statuses = n.GetCollectionOfObjectValues<StatusLayoutUpdate>(StatusLayoutUpdate.CreateFromDiscriminatorValue)?.ToList(); } },
                {"transitions", n => { Transitions = n.GetCollectionOfObjectValues<TransitionUpdateDTO>(TransitionUpdateDTO.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<WorkflowLayout>("startPointLayout", StartPointLayout);
            writer.WriteCollectionOfObjectValues<StatusLayoutUpdate>("statuses", Statuses);
            writer.WriteCollectionOfObjectValues<TransitionUpdateDTO>("transitions", Transitions);
        }
    }
}
