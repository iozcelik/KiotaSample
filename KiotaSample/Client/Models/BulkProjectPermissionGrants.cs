// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// List of project permissions and the projects and issues those permissions grant access to.
    /// </summary>
    public class BulkProjectPermissionGrants : IParsable {
        /// <summary>IDs of the issues the user has the permission for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<long?>? Issues { get; set; }
#nullable restore
#else
        public List<long?> Issues { get; set; }
#endif
        /// <summary>A project permission,</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Permission { get; set; }
#nullable restore
#else
        public string Permission { get; set; }
#endif
        /// <summary>IDs of the projects the user has the permission for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<long?>? Projects { get; set; }
#nullable restore
#else
        public List<long?> Projects { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static BulkProjectPermissionGrants CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new BulkProjectPermissionGrants();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"issues", n => { Issues = n.GetCollectionOfPrimitiveValues<long?>()?.ToList(); } },
                {"permission", n => { Permission = n.GetStringValue(); } },
                {"projects", n => { Projects = n.GetCollectionOfPrimitiveValues<long?>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<long?>("issues", Issues);
            writer.WriteStringValue("permission", Permission);
            writer.WriteCollectionOfPrimitiveValues<long?>("projects", Projects);
        }
    }
}
