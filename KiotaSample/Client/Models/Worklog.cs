// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of a worklog.
    /// </summary>
    public class Worklog : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Details of the user who created the worklog.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UserDetails? Author { get; private set; }
#nullable restore
#else
        public UserDetails Author { get; private set; }
#endif
        /// <summary>The datetime on which the worklog was created.</summary>
        public DateTimeOffset? Created { get; private set; }
        /// <summary>The ID of the worklog record.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; private set; }
#nullable restore
#else
        public string Id { get; private set; }
#endif
        /// <summary>The ID of the issue this worklog is for.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? IssueId { get; private set; }
#nullable restore
#else
        public string IssueId { get; private set; }
#endif
        /// <summary>Details of properties for the worklog. Optional when creating or updating a worklog.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<EntityProperty>? Properties { get; set; }
#nullable restore
#else
        public List<EntityProperty> Properties { get; set; }
#endif
        /// <summary>The URL of the worklog item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Self { get; private set; }
#nullable restore
#else
        public string Self { get; private set; }
#endif
        /// <summary>The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.</summary>
        public DateTimeOffset? Started { get; set; }
        /// <summary>The time spent working on the issue as days (\#d), hours (\#h), or minutes (\#m or \#). Required when creating a worklog if `timeSpentSeconds` isn&apos;t provided. Optional when updating a worklog. Cannot be provided if `timeSpentSecond` is provided.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeSpent { get; set; }
#nullable restore
#else
        public string TimeSpent { get; set; }
#endif
        /// <summary>The time in seconds spent working on the issue. Required when creating a worklog if `timeSpent` isn&apos;t provided. Optional when updating a worklog. Cannot be provided if `timeSpent` is provided.</summary>
        public long? TimeSpentSeconds { get; set; }
        /// <summary>Details of the user who last updated the worklog.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UserDetails? UpdateAuthor { get; private set; }
#nullable restore
#else
        public UserDetails UpdateAuthor { get; private set; }
#endif
        /// <summary>The datetime on which the worklog was last updated.</summary>
        public DateTimeOffset? Updated { get; private set; }
        /// <summary>Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.Visibility? Visibility { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.Visibility Visibility { get; set; }
#endif
        /// <summary>
        /// Instantiates a new Worklog and sets the default values.
        /// </summary>
        public Worklog() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Worklog CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Worklog();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"author", n => { Author = n.GetObjectValue<UserDetails>(UserDetails.CreateFromDiscriminatorValue); } },
                {"created", n => { Created = n.GetDateTimeOffsetValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"issueId", n => { IssueId = n.GetStringValue(); } },
                {"properties", n => { Properties = n.GetCollectionOfObjectValues<EntityProperty>(EntityProperty.CreateFromDiscriminatorValue)?.ToList(); } },
                {"self", n => { Self = n.GetStringValue(); } },
                {"started", n => { Started = n.GetDateTimeOffsetValue(); } },
                {"timeSpent", n => { TimeSpent = n.GetStringValue(); } },
                {"timeSpentSeconds", n => { TimeSpentSeconds = n.GetLongValue(); } },
                {"updateAuthor", n => { UpdateAuthor = n.GetObjectValue<UserDetails>(UserDetails.CreateFromDiscriminatorValue); } },
                {"updated", n => { Updated = n.GetDateTimeOffsetValue(); } },
                {"visibility", n => { Visibility = n.GetObjectValue<AtlassianClient.Models.Visibility>(AtlassianClient.Models.Visibility.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<EntityProperty>("properties", Properties);
            writer.WriteDateTimeOffsetValue("started", Started);
            writer.WriteStringValue("timeSpent", TimeSpent);
            writer.WriteLongValue("timeSpentSeconds", TimeSpentSeconds);
            writer.WriteObjectValue<AtlassianClient.Models.Visibility>("visibility", Visibility);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
