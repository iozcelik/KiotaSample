// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    public class OldToNewSecurityLevelMappingsBean : IParsable {
        /// <summary>The new issue security level ID. Providing null will clear the assigned old level from issues.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NewLevelId { get; set; }
#nullable restore
#else
        public string NewLevelId { get; set; }
#endif
        /// <summary>The old issue security level ID. Providing null will remap all issues without any assigned levels.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? OldLevelId { get; set; }
#nullable restore
#else
        public string OldLevelId { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static OldToNewSecurityLevelMappingsBean CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new OldToNewSecurityLevelMappingsBean();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"newLevelId", n => { NewLevelId = n.GetStringValue(); } },
                {"oldLevelId", n => { OldLevelId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("newLevelId", NewLevelId);
            writer.WriteStringValue("oldLevelId", OldLevelId);
        }
    }
}
