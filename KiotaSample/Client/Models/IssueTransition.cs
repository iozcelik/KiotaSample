// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of an issue transition.
    /// </summary>
    public class IssueTransition : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Expand options that include additional transition details in the response.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Expand { get; private set; }
#nullable restore
#else
        public string Expand { get; private set; }
#endif
        /// <summary>Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public IssueTransition_fields? Fields { get; private set; }
#nullable restore
#else
        public IssueTransition_fields Fields { get; private set; }
#endif
        /// <summary>Whether there is a screen associated with the issue transition.</summary>
        public bool? HasScreen { get; private set; }
        /// <summary>The ID of the issue transition. Required when specifying a transition to undertake.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>Whether the transition is available to be performed.</summary>
        public bool? IsAvailable { get; private set; }
        /// <summary>Whether the issue has to meet criteria before the issue transition is applied.</summary>
        public bool? IsConditional { get; private set; }
        /// <summary>Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.</summary>
        public bool? IsGlobal { get; private set; }
        /// <summary>Whether this is the initial issue transition for the workflow.</summary>
        public bool? IsInitial { get; private set; }
        /// <summary>The looped property</summary>
        public bool? Looped { get; set; }
        /// <summary>The name of the issue transition.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; private set; }
#nullable restore
#else
        public string Name { get; private set; }
#endif
        /// <summary>Details of the issue status after the transition.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public StatusDetails? To { get; private set; }
#nullable restore
#else
        public StatusDetails To { get; private set; }
#endif
        /// <summary>
        /// Instantiates a new IssueTransition and sets the default values.
        /// </summary>
        public IssueTransition() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static IssueTransition CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new IssueTransition();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"expand", n => { Expand = n.GetStringValue(); } },
                {"fields", n => { Fields = n.GetObjectValue<IssueTransition_fields>(IssueTransition_fields.CreateFromDiscriminatorValue); } },
                {"hasScreen", n => { HasScreen = n.GetBoolValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"isAvailable", n => { IsAvailable = n.GetBoolValue(); } },
                {"isConditional", n => { IsConditional = n.GetBoolValue(); } },
                {"isGlobal", n => { IsGlobal = n.GetBoolValue(); } },
                {"isInitial", n => { IsInitial = n.GetBoolValue(); } },
                {"looped", n => { Looped = n.GetBoolValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"to", n => { To = n.GetObjectValue<StatusDetails>(StatusDetails.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("id", Id);
            writer.WriteBoolValue("looped", Looped);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
