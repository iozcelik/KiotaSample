// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// The IDs of the screens for the screen types of the screen scheme.
    /// </summary>
    public class UpdateScreenTypes : IParsable {
        /// <summary>The ID of the create screen. To remove the screen association, pass a null.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Create { get; set; }
#nullable restore
#else
        public string Create { get; set; }
#endif
        /// <summary>The ID of the default screen. When specified, must include a screen ID as a default screen is required.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Default { get; set; }
#nullable restore
#else
        public string Default { get; set; }
#endif
        /// <summary>The ID of the edit screen. To remove the screen association, pass a null.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Edit { get; set; }
#nullable restore
#else
        public string Edit { get; set; }
#endif
        /// <summary>The ID of the view screen. To remove the screen association, pass a null.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? View { get; set; }
#nullable restore
#else
        public string View { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static UpdateScreenTypes CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new UpdateScreenTypes();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"create", n => { Create = n.GetStringValue(); } },
                {"default", n => { Default = n.GetStringValue(); } },
                {"edit", n => { Edit = n.GetStringValue(); } },
                {"view", n => { View = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("create", Create);
            writer.WriteStringValue("default", Default);
            writer.WriteStringValue("edit", Edit);
            writer.WriteStringValue("view", View);
        }
    }
}
