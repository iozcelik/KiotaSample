// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// An audit record.
    /// </summary>
    public class AuditRecordBean : IParsable {
        /// <summary>The list of items associated with the changed record.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<AssociatedItemBean>? AssociatedItems { get; private set; }
#nullable restore
#else
        public List<AssociatedItemBean> AssociatedItems { get; private set; }
#endif
        /// <summary>Deprecated, use `authorAccountId` instead. The key of the user who created the audit record.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AuthorKey { get; private set; }
#nullable restore
#else
        public string AuthorKey { get; private set; }
#endif
        /// <summary>The category of the audit record. For a list of these categories, see the help article [Auditing in Jira applications](https://confluence.atlassian.com/x/noXKM).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Category { get; private set; }
#nullable restore
#else
        public string Category { get; private set; }
#endif
        /// <summary>The list of values changed in the record event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ChangedValueBean>? ChangedValues { get; private set; }
#nullable restore
#else
        public List<ChangedValueBean> ChangedValues { get; private set; }
#endif
        /// <summary>The date and time on which the audit record was created.</summary>
        public DateTimeOffset? Created { get; private set; }
        /// <summary>The description of the audit record.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; private set; }
#nullable restore
#else
        public string Description { get; private set; }
#endif
        /// <summary>The event the audit record originated from.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? EventSource { get; private set; }
#nullable restore
#else
        public string EventSource { get; private set; }
#endif
        /// <summary>The ID of the audit record.</summary>
        public long? Id { get; private set; }
        /// <summary>Details of an item associated with the changed record.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AssociatedItemBean? ObjectItem { get; set; }
#nullable restore
#else
        public AssociatedItemBean ObjectItem { get; set; }
#endif
        /// <summary>The URL of the computer where the creation of the audit record was initiated.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RemoteAddress { get; private set; }
#nullable restore
#else
        public string RemoteAddress { get; private set; }
#endif
        /// <summary>The summary of the audit record.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Summary { get; private set; }
#nullable restore
#else
        public string Summary { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static AuditRecordBean CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AuditRecordBean();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"associatedItems", n => { AssociatedItems = n.GetCollectionOfObjectValues<AssociatedItemBean>(AssociatedItemBean.CreateFromDiscriminatorValue)?.ToList(); } },
                {"authorKey", n => { AuthorKey = n.GetStringValue(); } },
                {"category", n => { Category = n.GetStringValue(); } },
                {"changedValues", n => { ChangedValues = n.GetCollectionOfObjectValues<ChangedValueBean>(ChangedValueBean.CreateFromDiscriminatorValue)?.ToList(); } },
                {"created", n => { Created = n.GetDateTimeOffsetValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"eventSource", n => { EventSource = n.GetStringValue(); } },
                {"id", n => { Id = n.GetLongValue(); } },
                {"objectItem", n => { ObjectItem = n.GetObjectValue<AssociatedItemBean>(AssociatedItemBean.CreateFromDiscriminatorValue); } },
                {"remoteAddress", n => { RemoteAddress = n.GetStringValue(); } },
                {"summary", n => { Summary = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<AssociatedItemBean>("objectItem", ObjectItem);
        }
    }
}
