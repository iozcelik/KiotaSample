// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// The response for status request for a running/completed export task.
    /// </summary>
    public class ExportArchivedIssuesTaskProgressResponse : IParsable {
        /// <summary>The fileUrl property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? FileUrl { get; set; }
#nullable restore
#else
        public string FileUrl { get; set; }
#endif
        /// <summary>The payload property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Payload { get; set; }
#nullable restore
#else
        public string Payload { get; set; }
#endif
        /// <summary>The progress property</summary>
        public long? Progress { get; set; }
        /// <summary>The status property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Status { get; set; }
#nullable restore
#else
        public string Status { get; set; }
#endif
        /// <summary>The submittedTime property</summary>
        public DateTimeOffset? SubmittedTime { get; set; }
        /// <summary>The taskId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TaskId { get; set; }
#nullable restore
#else
        public string TaskId { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ExportArchivedIssuesTaskProgressResponse CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ExportArchivedIssuesTaskProgressResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"fileUrl", n => { FileUrl = n.GetStringValue(); } },
                {"payload", n => { Payload = n.GetStringValue(); } },
                {"progress", n => { Progress = n.GetLongValue(); } },
                {"status", n => { Status = n.GetStringValue(); } },
                {"submittedTime", n => { SubmittedTime = n.GetDateTimeOffsetValue(); } },
                {"taskId", n => { TaskId = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("fileUrl", FileUrl);
            writer.WriteStringValue("payload", Payload);
            writer.WriteLongValue("progress", Progress);
            writer.WriteStringValue("status", Status);
            writer.WriteDateTimeOffsetValue("submittedTime", SubmittedTime);
            writer.WriteStringValue("taskId", TaskId);
        }
    }
}
