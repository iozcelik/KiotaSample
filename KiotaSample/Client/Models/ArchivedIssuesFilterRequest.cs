// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of a filter for exporting archived issues.
    /// </summary>
    public class ArchivedIssuesFilterRequest : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>List archived issues archived by a specified account ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? ArchivedBy { get; set; }
#nullable restore
#else
        public List<string> ArchivedBy { get; set; }
#endif
        /// <summary>List issues archived within a specified date range.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DateRangeFilterRequest? ArchivedDateRange { get; set; }
#nullable restore
#else
        public DateRangeFilterRequest ArchivedDateRange { get; set; }
#endif
        /// <summary>List archived issues with a specified issue type ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? IssueTypes { get; set; }
#nullable restore
#else
        public List<string> IssueTypes { get; set; }
#endif
        /// <summary>List archived issues with a specified project key.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Projects { get; set; }
#nullable restore
#else
        public List<string> Projects { get; set; }
#endif
        /// <summary>List archived issues where the reporter is a specified account ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Reporters { get; set; }
#nullable restore
#else
        public List<string> Reporters { get; set; }
#endif
        /// <summary>
        /// Instantiates a new ArchivedIssuesFilterRequest and sets the default values.
        /// </summary>
        public ArchivedIssuesFilterRequest() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ArchivedIssuesFilterRequest CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ArchivedIssuesFilterRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"archivedBy", n => { ArchivedBy = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"archivedDateRange", n => { ArchivedDateRange = n.GetObjectValue<DateRangeFilterRequest>(DateRangeFilterRequest.CreateFromDiscriminatorValue); } },
                {"issueTypes", n => { IssueTypes = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"projects", n => { Projects = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"reporters", n => { Reporters = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfPrimitiveValues<string>("archivedBy", ArchivedBy);
            writer.WriteObjectValue<DateRangeFilterRequest>("archivedDateRange", ArchivedDateRange);
            writer.WriteCollectionOfPrimitiveValues<string>("issueTypes", IssueTypes);
            writer.WriteCollectionOfPrimitiveValues<string>("projects", Projects);
            writer.WriteCollectionOfPrimitiveValues<string>("reporters", Reporters);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
