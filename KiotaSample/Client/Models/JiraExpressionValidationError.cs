// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details about syntax and type errors. The error details apply to the entire expression, unless the object includes: *  `line` and `column` *  `expression`
    /// </summary>
    public class JiraExpressionValidationError : IParsable {
        /// <summary>The text column in which the error occurred.</summary>
        public int? Column { get; set; }
        /// <summary>The part of the expression in which the error occurred.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Expression { get; set; }
#nullable restore
#else
        public string Expression { get; set; }
#endif
        /// <summary>The text line in which the error occurred.</summary>
        public int? Line { get; set; }
        /// <summary>Details about the error.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>The error type.</summary>
        public JiraExpressionValidationError_type? Type { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JiraExpressionValidationError CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JiraExpressionValidationError();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"column", n => { Column = n.GetIntValue(); } },
                {"expression", n => { Expression = n.GetStringValue(); } },
                {"line", n => { Line = n.GetIntValue(); } },
                {"message", n => { Message = n.GetStringValue(); } },
                {"type", n => { Type = n.GetEnumValue<JiraExpressionValidationError_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteIntValue("column", Column);
            writer.WriteStringValue("expression", Expression);
            writer.WriteIntValue("line", Line);
            writer.WriteStringValue("message", Message);
            writer.WriteEnumValue<JiraExpressionValidationError_type>("type", Type);
        }
    }
}
