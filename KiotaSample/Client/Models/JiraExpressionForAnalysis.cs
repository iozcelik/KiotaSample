// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of Jira expressions for analysis.
    /// </summary>
    public class JiraExpressionForAnalysis : IParsable {
        /// <summary>Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as `issue` or `project`, are available in context and sets their type. Use this property to override the default types or provide details of new variables.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public JiraExpressionForAnalysis_contextVariables? ContextVariables { get; set; }
#nullable restore
#else
        public JiraExpressionForAnalysis_contextVariables ContextVariables { get; set; }
#endif
        /// <summary>The list of Jira expressions to analyse.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Expressions { get; set; }
#nullable restore
#else
        public List<string> Expressions { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static JiraExpressionForAnalysis CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new JiraExpressionForAnalysis();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"contextVariables", n => { ContextVariables = n.GetObjectValue<JiraExpressionForAnalysis_contextVariables>(JiraExpressionForAnalysis_contextVariables.CreateFromDiscriminatorValue); } },
                {"expressions", n => { Expressions = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<JiraExpressionForAnalysis_contextVariables>("contextVariables", ContextVariables);
            writer.WriteCollectionOfPrimitiveValues<string>("expressions", Expressions);
        }
    }
}
