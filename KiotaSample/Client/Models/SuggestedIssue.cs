// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// An issue suggested for use in the issue picker auto-completion.
    /// </summary>
    public class SuggestedIssue : IParsable {
        /// <summary>The ID of the issue.</summary>
        public long? Id { get; private set; }
        /// <summary>The URL of the issue type&apos;s avatar.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Img { get; private set; }
#nullable restore
#else
        public string Img { get; private set; }
#endif
        /// <summary>The key of the issue.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Key { get; private set; }
#nullable restore
#else
        public string Key { get; private set; }
#endif
        /// <summary>The key of the issue in HTML format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? KeyHtml { get; private set; }
#nullable restore
#else
        public string KeyHtml { get; private set; }
#endif
        /// <summary>The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Summary { get; private set; }
#nullable restore
#else
        public string Summary { get; private set; }
#endif
        /// <summary>The phrase containing the query string, as plain text.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SummaryText { get; private set; }
#nullable restore
#else
        public string SummaryText { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SuggestedIssue CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SuggestedIssue();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"id", n => { Id = n.GetLongValue(); } },
                {"img", n => { Img = n.GetStringValue(); } },
                {"key", n => { Key = n.GetStringValue(); } },
                {"keyHtml", n => { KeyHtml = n.GetStringValue(); } },
                {"summary", n => { Summary = n.GetStringValue(); } },
                {"summaryText", n => { SummaryText = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
        }
    }
}
