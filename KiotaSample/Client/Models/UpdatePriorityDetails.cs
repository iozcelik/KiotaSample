// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of an issue priority.
    /// </summary>
    public class UpdatePriorityDetails : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The description of the priority.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.</summary>
        public UpdatePriorityDetails_iconUrl? IconUrl { get; set; }
        /// <summary>The name of the priority. Must be unique.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The status color of the priority in 3-digit or 6-digit hexadecimal format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StatusColor { get; set; }
#nullable restore
#else
        public string StatusColor { get; set; }
#endif
        /// <summary>
        /// Instantiates a new UpdatePriorityDetails and sets the default values.
        /// </summary>
        public UpdatePriorityDetails() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static UpdatePriorityDetails CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new UpdatePriorityDetails();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"description", n => { Description = n.GetStringValue(); } },
                {"iconUrl", n => { IconUrl = n.GetEnumValue<UpdatePriorityDetails_iconUrl>(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"statusColor", n => { StatusColor = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("description", Description);
            writer.WriteEnumValue<UpdatePriorityDetails_iconUrl>("iconUrl", IconUrl);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("statusColor", StatusColor);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
