// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    public class WorkflowReadRequest : IParsable {
        /// <summary>The list of projects and issue types to query.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ProjectAndIssueTypePair>? ProjectAndIssueTypes { get; set; }
#nullable restore
#else
        public List<ProjectAndIssueTypePair> ProjectAndIssueTypes { get; set; }
#endif
        /// <summary>The list of workflow IDs to query.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? WorkflowIds { get; set; }
#nullable restore
#else
        public List<string> WorkflowIds { get; set; }
#endif
        /// <summary>The list of workflow names to query.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? WorkflowNames { get; set; }
#nullable restore
#else
        public List<string> WorkflowNames { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static WorkflowReadRequest CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new WorkflowReadRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"projectAndIssueTypes", n => { ProjectAndIssueTypes = n.GetCollectionOfObjectValues<ProjectAndIssueTypePair>(ProjectAndIssueTypePair.CreateFromDiscriminatorValue)?.ToList(); } },
                {"workflowIds", n => { WorkflowIds = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
                {"workflowNames", n => { WorkflowNames = n.GetCollectionOfPrimitiveValues<string>()?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<ProjectAndIssueTypePair>("projectAndIssueTypes", ProjectAndIssueTypes);
            writer.WriteCollectionOfPrimitiveValues<string>("workflowIds", WorkflowIds);
            writer.WriteCollectionOfPrimitiveValues<string>("workflowNames", WorkflowNames);
        }
    }
}
