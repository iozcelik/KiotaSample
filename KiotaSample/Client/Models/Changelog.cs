// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// A log of changes made to issue fields. Changelogs related to workflow associations are currently being deprecated.
    /// </summary>
    public class Changelog : IParsable {
        /// <summary>The user who made the change.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UserDetails? Author { get; private set; }
#nullable restore
#else
        public UserDetails Author { get; private set; }
#endif
        /// <summary>The date on which the change took place.</summary>
        public DateTimeOffset? Created { get; private set; }
        /// <summary>The history metadata associated with the changed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.HistoryMetadata? HistoryMetadata { get; private set; }
#nullable restore
#else
        public AtlassianClient.Models.HistoryMetadata HistoryMetadata { get; private set; }
#endif
        /// <summary>The ID of the changelog.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; private set; }
#nullable restore
#else
        public string Id { get; private set; }
#endif
        /// <summary>The list of items changed.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<ChangeDetails>? Items { get; private set; }
#nullable restore
#else
        public List<ChangeDetails> Items { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Changelog CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Changelog();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"author", n => { Author = n.GetObjectValue<UserDetails>(UserDetails.CreateFromDiscriminatorValue); } },
                {"created", n => { Created = n.GetDateTimeOffsetValue(); } },
                {"historyMetadata", n => { HistoryMetadata = n.GetObjectValue<AtlassianClient.Models.HistoryMetadata>(AtlassianClient.Models.HistoryMetadata.CreateFromDiscriminatorValue); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"items", n => { Items = n.GetCollectionOfObjectValues<ChangeDetails>(ChangeDetails.CreateFromDiscriminatorValue)?.ToList(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
        }
    }
}
