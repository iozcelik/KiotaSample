// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details about a project version.
    /// </summary>
    public class VersionObject : IParsable {
        /// <summary>If the expand option `approvers` is used, returns a list containing the approvers for this version.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<VersionApprover>? Approvers { get; private set; }
#nullable restore
#else
        public List<VersionApprover> Approvers { get; private set; }
#endif
        /// <summary>Indicates that the version is archived. Optional when creating or updating a version.</summary>
        public bool? Archived { get; set; }
        /// <summary>The description of the version. Optional when creating or updating a version. The maximum size is 16,384 bytes.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>If the expand option `driver` is used, returns the Atlassian account ID of the driver.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Driver { get; private set; }
#nullable restore
#else
        public string Driver { get; private set; }
#endif
        /// <summary>Use [expand](em&gt;#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include: *  `operations` Returns the list of operations available for this version. *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*. *  `driver` Returns the Atlassian account ID of the version driver. *  `approvers` Returns a list containing approvers for this version.Optional for create and update.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Expand { get; set; }
#nullable restore
#else
        public string Expand { get; set; }
#endif
        /// <summary>The ID of the version.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; private set; }
#nullable restore
#else
        public string Id { get; private set; }
#endif
        /// <summary>If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public VersionIssuesStatus? IssuesStatusForFixVersion { get; private set; }
#nullable restore
#else
        public VersionIssuesStatus IssuesStatusForFixVersion { get; private set; }
#endif
        /// <summary>The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MoveUnfixedIssuesTo { get; set; }
#nullable restore
#else
        public string MoveUnfixedIssuesTo { get; set; }
#endif
        /// <summary>The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>If the expand option `operations` is used, returns the list of operations available for this version.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<SimpleLink>? Operations { get; private set; }
#nullable restore
#else
        public List<SimpleLink> Operations { get; private set; }
#endif
        /// <summary>Indicates that the version is overdue.</summary>
        public bool? Overdue { get; private set; }
        /// <summary>Deprecated. Use `projectId`.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Project { get; set; }
#nullable restore
#else
        public string Project { get; set; }
#endif
        /// <summary>The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.</summary>
        public long? ProjectId { get; set; }
        /// <summary>Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.</summary>
        public bool? Released { get; set; }
        /// <summary>The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.</summary>
        public Date? ReleaseDate { get; set; }
        /// <summary>The URL of the version.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Self { get; private set; }
#nullable restore
#else
        public string Self { get; private set; }
#endif
        /// <summary>The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.</summary>
        public Date? StartDate { get; set; }
        /// <summary>The date on which work on this version is expected to finish, expressed in the instance&apos;s *Day/Month/Year Format* date format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserReleaseDate { get; private set; }
#nullable restore
#else
        public string UserReleaseDate { get; private set; }
#endif
        /// <summary>The date on which work on this version is expected to start, expressed in the instance&apos;s *Day/Month/Year Format* date format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UserStartDate { get; private set; }
#nullable restore
#else
        public string UserStartDate { get; private set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static VersionObject CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new VersionObject();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"approvers", n => { Approvers = n.GetCollectionOfObjectValues<VersionApprover>(VersionApprover.CreateFromDiscriminatorValue)?.ToList(); } },
                {"archived", n => { Archived = n.GetBoolValue(); } },
                {"description", n => { Description = n.GetStringValue(); } },
                {"driver", n => { Driver = n.GetStringValue(); } },
                {"expand", n => { Expand = n.GetStringValue(); } },
                {"id", n => { Id = n.GetStringValue(); } },
                {"issuesStatusForFixVersion", n => { IssuesStatusForFixVersion = n.GetObjectValue<VersionIssuesStatus>(VersionIssuesStatus.CreateFromDiscriminatorValue); } },
                {"moveUnfixedIssuesTo", n => { MoveUnfixedIssuesTo = n.GetStringValue(); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"operations", n => { Operations = n.GetCollectionOfObjectValues<SimpleLink>(SimpleLink.CreateFromDiscriminatorValue)?.ToList(); } },
                {"overdue", n => { Overdue = n.GetBoolValue(); } },
                {"project", n => { Project = n.GetStringValue(); } },
                {"projectId", n => { ProjectId = n.GetLongValue(); } },
                {"releaseDate", n => { ReleaseDate = n.GetDateValue(); } },
                {"released", n => { Released = n.GetBoolValue(); } },
                {"self", n => { Self = n.GetStringValue(); } },
                {"startDate", n => { StartDate = n.GetDateValue(); } },
                {"userReleaseDate", n => { UserReleaseDate = n.GetStringValue(); } },
                {"userStartDate", n => { UserStartDate = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("archived", Archived);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("expand", Expand);
            writer.WriteStringValue("moveUnfixedIssuesTo", MoveUnfixedIssuesTo);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("project", Project);
            writer.WriteLongValue("projectId", ProjectId);
            writer.WriteBoolValue("released", Released);
            writer.WriteDateValue("releaseDate", ReleaseDate);
            writer.WriteDateValue("startDate", StartDate);
        }
    }
}
