// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of a remote issue link.
    /// </summary>
    public class RemoteIssueLinkRequest : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Details of the remote application the linked item is in. For example, trello.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.Application? Application { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.Application Application { get; set; }
#endif
        /// <summary>An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: `appId=456&amp;pageId=123`.Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record&apos;s Jira ID.The maximum length is 255 characters.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? GlobalId { get; set; }
#nullable restore
#else
        public string GlobalId { get; set; }
#endif
        /// <summary>Details of the item linked to.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RemoteObject? Object { get; set; }
#nullable restore
#else
        public RemoteObject Object { get; set; }
#endif
        /// <summary>Description of the relationship between the issue and the linked item. If not set, the relationship description &quot;links to&quot; is used in Jira.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Relationship { get; set; }
#nullable restore
#else
        public string Relationship { get; set; }
#endif
        /// <summary>
        /// Instantiates a new RemoteIssueLinkRequest and sets the default values.
        /// </summary>
        public RemoteIssueLinkRequest() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static RemoteIssueLinkRequest CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new RemoteIssueLinkRequest();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"application", n => { Application = n.GetObjectValue<AtlassianClient.Models.Application>(AtlassianClient.Models.Application.CreateFromDiscriminatorValue); } },
                {"globalId", n => { GlobalId = n.GetStringValue(); } },
                {"object", n => { Object = n.GetObjectValue<RemoteObject>(RemoteObject.CreateFromDiscriminatorValue); } },
                {"relationship", n => { Relationship = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<AtlassianClient.Models.Application>("application", Application);
            writer.WriteStringValue("globalId", GlobalId);
            writer.WriteObjectValue<RemoteObject>("object", Object);
            writer.WriteStringValue("relationship", Relationship);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
