// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// Details of a share permission for the filter.
    /// </summary>
    public class SharePermission : IParsable {
        /// <summary>The group that the filter is shared with. For a request, specify the `groupId` or `name` property for the group. As a group&apos;s name can change, use of `groupId` is recommended.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public GroupName? Group { get; set; }
#nullable restore
#else
        public GroupName Group { get; set; }
#endif
        /// <summary>The unique identifier of the share permission.</summary>
        public long? Id { get; private set; }
        /// <summary>The project that the filter is shared with. This is similar to the project object returned by [Get project](#api-rest-api-3-project-projectIdOrKey-get) but it contains a subset of the properties, which are: `self`, `id`, `key`, `assigneeType`, `name`, `roles`, `avatarUrls`, `projectType`, `simplified`.  For a request, specify the `id` for the project.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public AtlassianClient.Models.Project? Project { get; set; }
#nullable restore
#else
        public AtlassianClient.Models.Project Project { get; set; }
#endif
        /// <summary>The project role that the filter is shared with.  For a request, specify the `id` for the role. You must also specify the `project` object and `id` for the project that the role is in.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ProjectRole? Role { get; set; }
#nullable restore
#else
        public ProjectRole Role { get; set; }
#endif
        /// <summary>The type of share permission: *  `user` Shared with a user. *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well. *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well. *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`. *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified. *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`. *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.</summary>
        public SharePermission_type? Type { get; set; }
        /// <summary>The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UserBean? User { get; set; }
#nullable restore
#else
        public UserBean User { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SharePermission CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SharePermission();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"group", n => { Group = n.GetObjectValue<GroupName>(GroupName.CreateFromDiscriminatorValue); } },
                {"id", n => { Id = n.GetLongValue(); } },
                {"project", n => { Project = n.GetObjectValue<AtlassianClient.Models.Project>(AtlassianClient.Models.Project.CreateFromDiscriminatorValue); } },
                {"role", n => { Role = n.GetObjectValue<ProjectRole>(ProjectRole.CreateFromDiscriminatorValue); } },
                {"type", n => { Type = n.GetEnumValue<SharePermission_type>(); } },
                {"user", n => { User = n.GetObjectValue<UserBean>(UserBean.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<GroupName>("group", Group);
            writer.WriteObjectValue<AtlassianClient.Models.Project>("project", Project);
            writer.WriteObjectValue<ProjectRole>("role", Role);
            writer.WriteEnumValue<SharePermission_type>("type", Type);
            writer.WriteObjectValue<UserBean>("user", User);
        }
    }
}
