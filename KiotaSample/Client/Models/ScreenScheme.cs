// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace AtlassianClient.Models {
    /// <summary>
    /// A screen scheme.
    /// </summary>
    public class ScreenScheme : IParsable {
        /// <summary>The description of the screen scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>The ID of the screen scheme.</summary>
        public long? Id { get; set; }
        /// <summary>Details of the issue type screen schemes associated with the screen scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public PageBeanIssueTypeScreenScheme? IssueTypeScreenSchemes { get; set; }
#nullable restore
#else
        public PageBeanIssueTypeScreenScheme IssueTypeScreenSchemes { get; set; }
#endif
        /// <summary>The name of the screen scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The IDs of the screens for the screen types of the screen scheme.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ScreenTypes? Screens { get; set; }
#nullable restore
#else
        public ScreenTypes Screens { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static ScreenScheme CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new ScreenScheme();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"description", n => { Description = n.GetStringValue(); } },
                {"id", n => { Id = n.GetLongValue(); } },
                {"issueTypeScreenSchemes", n => { IssueTypeScreenSchemes = n.GetObjectValue<PageBeanIssueTypeScreenScheme>(PageBeanIssueTypeScreenScheme.CreateFromDiscriminatorValue); } },
                {"name", n => { Name = n.GetStringValue(); } },
                {"screens", n => { Screens = n.GetObjectValue<ScreenTypes>(ScreenTypes.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("description", Description);
            writer.WriteLongValue("id", Id);
            writer.WriteObjectValue<PageBeanIssueTypeScreenScheme>("issueTypeScreenSchemes", IssueTypeScreenSchemes);
            writer.WriteStringValue("name", Name);
            writer.WriteObjectValue<ScreenTypes>("screens", Screens);
        }
    }
}
